{"ast":null,"code":"// Import the enhanced API client\nimport apiClient from'./api';// ==================== USER MANAGEMENT SERVICE ====================\nexport const userManagementService={// Admin user management APIs\nadmin:{// Get all users with pagination and filtering\ngetAllUsers:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await apiClient.get('/api/v1/admin/users',{params});return response;},// Get user by ID  \ngetUserById:async id=>{const response=await apiClient.get(\"/api/v1/admin/users/\".concat(id));return response;},// Create new user\ncreateUser:async userData=>{const response=await apiClient.post('/api/v1/admin/users',userData);return response;},// Update user\nupdateUser:async(id,userData)=>{const response=await apiClient.put(\"/api/v1/admin/users/\".concat(id),userData);return response;},// Delete user (soft delete)\ndeleteUser:async id=>{const response=await apiClient.delete(\"/api/v1/admin/users/\".concat(id));return response;},// Toggle user status\ntoggleUserStatus:async(id,isActive)=>{const response=await apiClient.patch(\"/api/v1/admin/users/\".concat(id,\"/status\"),null,{params:{isActive}});return response;},// Assign roles to user\nassignRoles:async(id,roles)=>{const response=await apiClient.patch(\"/api/v1/admin/users/\".concat(id,\"/roles\"),roles);return response;},// Reset user password\nresetUserPassword:async(id,newPassword)=>{const response=await apiClient.patch(\"/api/v1/admin/users/\".concat(id,\"/reset-password\"),null,{params:{newPassword}});return response;},// Get user statistics\ngetUserStatistics:async()=>{const response=await apiClient.get('/api/v1/admin/users/statistics');return response;},// Bulk delete users\nbulkDeleteUsers:async userIds=>{const response=await apiClient.delete('/api/v1/admin/users/bulk',{data:userIds});return response;},// Export users to CSV\nexportUsers:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await apiClient.get('/api/v1/admin/users/export',{params,responseType:'text'});return response;}},// User profile management\nprofile:{// Get current user profile\ngetProfile:async()=>{const response=await apiClient.get('/api/v1/user/profile');return response;},// Update profile\nupdateProfile:async profileData=>{const response=await apiClient.put('/api/v1/user/profile',profileData);return response;},// Change password\nchangePassword:async(currentPassword,newPassword)=>{const response=await apiClient.patch('/api/v1/user/profile/change-password',null,{params:{currentPassword,newPassword}});return response;},// Upload avatar\nuploadAvatar:async(file,onUploadProgress)=>{const formData=new FormData();formData.append('file',file);const response=await apiClient.post('/api/v1/user/profile/avatar',formData,{headers:{'Content-Type':'multipart/form-data'},onUploadProgress:progressEvent=>{if(onUploadProgress&&progressEvent.total){const percentCompleted=Math.round(progressEvent.loaded*100/progressEvent.total);onUploadProgress(percentCompleted);}}});return response;},// Delete avatar\ndeleteAvatar:async()=>{const response=await apiClient.delete('/api/v1/user/profile/avatar');return response;},// Deactivate account\ndeactivateAccount:async()=>{const response=await apiClient.patch('/api/v1/user/profile/deactivate');return response;}},// Password reset\npasswordReset:{// Send forgot password email\nforgotPassword:async email=>{const response=await apiClient.post('/api/v1/auth/password/forgot',null,{params:{email}});return response;},// Verify reset token\nverifyResetToken:async token=>{const response=await apiClient.get('/api/v1/auth/password/reset/verify',{params:{token}});return response;},// Reset password with token\nresetPassword:async(token,newPassword)=>{const response=await apiClient.post('/api/v1/auth/password/reset',null,{params:{token,newPassword}});return response;}},// Role management\nroles:{// Get all roles\ngetAllRoles:async()=>{const response=await apiClient.get('/api/v1/admin/roles');return response;},// Get role statistics\ngetRoleStatistics:async()=>{const response=await apiClient.get('/api/v1/admin/roles/statistics');return response;},// Get users by role\ngetUsersByRole:async roleName=>{const response=await apiClient.get(\"/api/v1/admin/roles/\".concat(roleName,\"/users\"));return response;}}};// Export for backward compatibility\nexport const adminUserService=userManagementService.admin;export const userProfileService=userManagementService.profile;export const passwordResetService=userManagementService.passwordReset;export const roleManagementService=userManagementService.roles;","map":{"version":3,"names":["apiClient","userManagementService","admin","getAllUsers","params","arguments","length","undefined","response","get","getUserById","id","concat","createUser","userData","post","updateUser","put","deleteUser","delete","toggleUserStatus","isActive","patch","assignRoles","roles","resetUserPassword","newPassword","getUserStatistics","bulkDeleteUsers","userIds","data","exportUsers","responseType","profile","getProfile","updateProfile","profileData","changePassword","currentPassword","uploadAvatar","file","onUploadProgress","formData","FormData","append","headers","progressEvent","total","percentCompleted","Math","round","loaded","deleteAvatar","deactivateAccount","passwordReset","forgotPassword","email","verifyResetToken","token","resetPassword","getAllRoles","getRoleStatistics","getUsersByRole","roleName","adminUserService","userProfileService","passwordResetService","roleManagementService"],"sources":["C:/Users/ACER/Desktop/fe/fe-edu/src/services/userManagement.js"],"sourcesContent":["// Import the enhanced API client\nimport apiClient from './api';\n\n// ==================== USER MANAGEMENT SERVICE ====================\nexport const userManagementService = {\n  // Admin user management APIs\n  admin: {\n    // Get all users with pagination and filtering\n    getAllUsers: async (params = {}) => {\n      const response = await apiClient.get('/api/v1/admin/users', { params });\n      return response;\n    },\n\n    // Get user by ID  \n    getUserById: async (id) => {\n      const response = await apiClient.get(`/api/v1/admin/users/${id}`);\n      return response;\n    },\n\n    // Create new user\n    createUser: async (userData) => {\n      const response = await apiClient.post('/api/v1/admin/users', userData);\n      return response;\n    },\n\n    // Update user\n    updateUser: async (id, userData) => {\n      const response = await apiClient.put(`/api/v1/admin/users/${id}`, userData);\n      return response;\n    },\n\n    // Delete user (soft delete)\n    deleteUser: async (id) => {\n      const response = await apiClient.delete(`/api/v1/admin/users/${id}`);\n      return response;\n    },\n\n    // Toggle user status\n    toggleUserStatus: async (id, isActive) => {\n      const response = await apiClient.patch(`/api/v1/admin/users/${id}/status`, null, {\n        params: { isActive }\n      });\n      return response;\n    },\n\n    // Assign roles to user\n    assignRoles: async (id, roles) => {\n      const response = await apiClient.patch(`/api/v1/admin/users/${id}/roles`, roles);\n      return response;\n    },\n\n    // Reset user password\n    resetUserPassword: async (id, newPassword) => {\n      const response = await apiClient.patch(`/api/v1/admin/users/${id}/reset-password`, null, {\n        params: { newPassword }\n      });\n      return response;\n    },\n\n    // Get user statistics\n    getUserStatistics: async () => {\n      const response = await apiClient.get('/api/v1/admin/users/statistics');\n      return response;\n    },\n\n    // Bulk delete users\n    bulkDeleteUsers: async (userIds) => {\n      const response = await apiClient.delete('/api/v1/admin/users/bulk', {\n        data: userIds\n      });\n      return response;\n    },\n\n    // Export users to CSV\n    exportUsers: async (params = {}) => {\n      const response = await apiClient.get('/api/v1/admin/users/export', { \n        params,\n        responseType: 'text'\n      });\n      return response;\n    },\n  },\n\n  // User profile management\n  profile: {\n    // Get current user profile\n    getProfile: async () => {\n      const response = await apiClient.get('/api/v1/user/profile');\n      return response;\n    },\n\n    // Update profile\n    updateProfile: async (profileData) => {\n      const response = await apiClient.put('/api/v1/user/profile', profileData);\n      return response;\n    },\n\n    // Change password\n    changePassword: async (currentPassword, newPassword) => {\n      const response = await apiClient.patch('/api/v1/user/profile/change-password', null, {\n        params: { currentPassword, newPassword }\n      });\n      return response;\n    },\n\n    // Upload avatar\n    uploadAvatar: async (file, onUploadProgress) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await apiClient.post('/api/v1/user/profile/avatar', formData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n        onUploadProgress: (progressEvent) => {\n          if (onUploadProgress && progressEvent.total) {\n            const percentCompleted = Math.round(\n              (progressEvent.loaded * 100) / progressEvent.total\n            );\n            onUploadProgress(percentCompleted);\n          }\n        },\n      });\n      return response;\n    },\n\n    // Delete avatar\n    deleteAvatar: async () => {\n      const response = await apiClient.delete('/api/v1/user/profile/avatar');\n      return response;\n    },\n\n    // Deactivate account\n    deactivateAccount: async () => {\n      const response = await apiClient.patch('/api/v1/user/profile/deactivate');\n      return response;\n    },\n  },\n\n  // Password reset\n  passwordReset: {\n    // Send forgot password email\n    forgotPassword: async (email) => {\n      const response = await apiClient.post('/api/v1/auth/password/forgot', null, {\n        params: { email }\n      });\n      return response;\n    },\n\n    // Verify reset token\n    verifyResetToken: async (token) => {\n      const response = await apiClient.get('/api/v1/auth/password/reset/verify', {\n        params: { token }\n      });\n      return response;\n    },\n\n    // Reset password with token\n    resetPassword: async (token, newPassword) => {\n      const response = await apiClient.post('/api/v1/auth/password/reset', null, {\n        params: { token, newPassword }\n      });\n      return response;\n    },\n  },\n\n  // Role management\n  roles: {\n    // Get all roles\n    getAllRoles: async () => {\n      const response = await apiClient.get('/api/v1/admin/roles');\n      return response;\n    },\n\n    // Get role statistics\n    getRoleStatistics: async () => {\n      const response = await apiClient.get('/api/v1/admin/roles/statistics');\n      return response;\n    },\n\n    // Get users by role\n    getUsersByRole: async (roleName) => {\n      const response = await apiClient.get(`/api/v1/admin/roles/${roleName}/users`);\n      return response;\n    },\n  },\n};\n\n// Export for backward compatibility\nexport const adminUserService = userManagementService.admin;\nexport const userProfileService = userManagementService.profile;\nexport const passwordResetService = userManagementService.passwordReset;\nexport const roleManagementService = userManagementService.roles;\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,SAAS,KAAM,OAAO,CAE7B;AACA,MAAO,MAAM,CAAAC,qBAAqB,CAAG,CACnC;AACAC,KAAK,CAAE,CACL;AACAC,WAAW,CAAE,cAAAA,CAAA,CAAuB,IAAhB,CAAAC,MAAM,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CAC7B,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACS,GAAG,CAAC,qBAAqB,CAAE,CAAEL,MAAO,CAAC,CAAC,CACvE,MAAO,CAAAI,QAAQ,CACjB,CAAC,CAED;AACAE,WAAW,CAAE,KAAO,CAAAC,EAAE,EAAK,CACzB,KAAM,CAAAH,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACS,GAAG,wBAAAG,MAAA,CAAwBD,EAAE,CAAE,CAAC,CACjE,MAAO,CAAAH,QAAQ,CACjB,CAAC,CAED;AACAK,UAAU,CAAE,KAAO,CAAAC,QAAQ,EAAK,CAC9B,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACe,IAAI,CAAC,qBAAqB,CAAED,QAAQ,CAAC,CACtE,MAAO,CAAAN,QAAQ,CACjB,CAAC,CAED;AACAQ,UAAU,CAAE,KAAAA,CAAOL,EAAE,CAAEG,QAAQ,GAAK,CAClC,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACiB,GAAG,wBAAAL,MAAA,CAAwBD,EAAE,EAAIG,QAAQ,CAAC,CAC3E,MAAO,CAAAN,QAAQ,CACjB,CAAC,CAED;AACAU,UAAU,CAAE,KAAO,CAAAP,EAAE,EAAK,CACxB,KAAM,CAAAH,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACmB,MAAM,wBAAAP,MAAA,CAAwBD,EAAE,CAAE,CAAC,CACpE,MAAO,CAAAH,QAAQ,CACjB,CAAC,CAED;AACAY,gBAAgB,CAAE,KAAAA,CAAOT,EAAE,CAAEU,QAAQ,GAAK,CACxC,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACsB,KAAK,wBAAAV,MAAA,CAAwBD,EAAE,YAAW,IAAI,CAAE,CAC/EP,MAAM,CAAE,CAAEiB,QAAS,CACrB,CAAC,CAAC,CACF,MAAO,CAAAb,QAAQ,CACjB,CAAC,CAED;AACAe,WAAW,CAAE,KAAAA,CAAOZ,EAAE,CAAEa,KAAK,GAAK,CAChC,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACsB,KAAK,wBAAAV,MAAA,CAAwBD,EAAE,WAAUa,KAAK,CAAC,CAChF,MAAO,CAAAhB,QAAQ,CACjB,CAAC,CAED;AACAiB,iBAAiB,CAAE,KAAAA,CAAOd,EAAE,CAAEe,WAAW,GAAK,CAC5C,KAAM,CAAAlB,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACsB,KAAK,wBAAAV,MAAA,CAAwBD,EAAE,oBAAmB,IAAI,CAAE,CACvFP,MAAM,CAAE,CAAEsB,WAAY,CACxB,CAAC,CAAC,CACF,MAAO,CAAAlB,QAAQ,CACjB,CAAC,CAED;AACAmB,iBAAiB,CAAE,KAAAA,CAAA,GAAY,CAC7B,KAAM,CAAAnB,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACS,GAAG,CAAC,gCAAgC,CAAC,CACtE,MAAO,CAAAD,QAAQ,CACjB,CAAC,CAED;AACAoB,eAAe,CAAE,KAAO,CAAAC,OAAO,EAAK,CAClC,KAAM,CAAArB,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACmB,MAAM,CAAC,0BAA0B,CAAE,CAClEW,IAAI,CAAED,OACR,CAAC,CAAC,CACF,MAAO,CAAArB,QAAQ,CACjB,CAAC,CAED;AACAuB,WAAW,CAAE,cAAAA,CAAA,CAAuB,IAAhB,CAAA3B,MAAM,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CAC7B,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACS,GAAG,CAAC,4BAA4B,CAAE,CACjEL,MAAM,CACN4B,YAAY,CAAE,MAChB,CAAC,CAAC,CACF,MAAO,CAAAxB,QAAQ,CACjB,CACF,CAAC,CAED;AACAyB,OAAO,CAAE,CACP;AACAC,UAAU,CAAE,KAAAA,CAAA,GAAY,CACtB,KAAM,CAAA1B,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACS,GAAG,CAAC,sBAAsB,CAAC,CAC5D,MAAO,CAAAD,QAAQ,CACjB,CAAC,CAED;AACA2B,aAAa,CAAE,KAAO,CAAAC,WAAW,EAAK,CACpC,KAAM,CAAA5B,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACiB,GAAG,CAAC,sBAAsB,CAAEmB,WAAW,CAAC,CACzE,MAAO,CAAA5B,QAAQ,CACjB,CAAC,CAED;AACA6B,cAAc,CAAE,KAAAA,CAAOC,eAAe,CAAEZ,WAAW,GAAK,CACtD,KAAM,CAAAlB,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACsB,KAAK,CAAC,sCAAsC,CAAE,IAAI,CAAE,CACnFlB,MAAM,CAAE,CAAEkC,eAAe,CAAEZ,WAAY,CACzC,CAAC,CAAC,CACF,MAAO,CAAAlB,QAAQ,CACjB,CAAC,CAED;AACA+B,YAAY,CAAE,KAAAA,CAAOC,IAAI,CAAEC,gBAAgB,GAAK,CAC9C,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEJ,IAAI,CAAC,CAE7B,KAAM,CAAAhC,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACe,IAAI,CAAC,6BAA6B,CAAE2B,QAAQ,CAAE,CAC7EG,OAAO,CAAE,CAAE,cAAc,CAAE,qBAAsB,CAAC,CAClDJ,gBAAgB,CAAGK,aAAa,EAAK,CACnC,GAAIL,gBAAgB,EAAIK,aAAa,CAACC,KAAK,CAAE,CAC3C,KAAM,CAAAC,gBAAgB,CAAGC,IAAI,CAACC,KAAK,CAChCJ,aAAa,CAACK,MAAM,CAAG,GAAG,CAAIL,aAAa,CAACC,KAC/C,CAAC,CACDN,gBAAgB,CAACO,gBAAgB,CAAC,CACpC,CACF,CACF,CAAC,CAAC,CACF,MAAO,CAAAxC,QAAQ,CACjB,CAAC,CAED;AACA4C,YAAY,CAAE,KAAAA,CAAA,GAAY,CACxB,KAAM,CAAA5C,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACmB,MAAM,CAAC,6BAA6B,CAAC,CACtE,MAAO,CAAAX,QAAQ,CACjB,CAAC,CAED;AACA6C,iBAAiB,CAAE,KAAAA,CAAA,GAAY,CAC7B,KAAM,CAAA7C,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACsB,KAAK,CAAC,iCAAiC,CAAC,CACzE,MAAO,CAAAd,QAAQ,CACjB,CACF,CAAC,CAED;AACA8C,aAAa,CAAE,CACb;AACAC,cAAc,CAAE,KAAO,CAAAC,KAAK,EAAK,CAC/B,KAAM,CAAAhD,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACe,IAAI,CAAC,8BAA8B,CAAE,IAAI,CAAE,CAC1EX,MAAM,CAAE,CAAEoD,KAAM,CAClB,CAAC,CAAC,CACF,MAAO,CAAAhD,QAAQ,CACjB,CAAC,CAED;AACAiD,gBAAgB,CAAE,KAAO,CAAAC,KAAK,EAAK,CACjC,KAAM,CAAAlD,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACS,GAAG,CAAC,oCAAoC,CAAE,CACzEL,MAAM,CAAE,CAAEsD,KAAM,CAClB,CAAC,CAAC,CACF,MAAO,CAAAlD,QAAQ,CACjB,CAAC,CAED;AACAmD,aAAa,CAAE,KAAAA,CAAOD,KAAK,CAAEhC,WAAW,GAAK,CAC3C,KAAM,CAAAlB,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACe,IAAI,CAAC,6BAA6B,CAAE,IAAI,CAAE,CACzEX,MAAM,CAAE,CAAEsD,KAAK,CAAEhC,WAAY,CAC/B,CAAC,CAAC,CACF,MAAO,CAAAlB,QAAQ,CACjB,CACF,CAAC,CAED;AACAgB,KAAK,CAAE,CACL;AACAoC,WAAW,CAAE,KAAAA,CAAA,GAAY,CACvB,KAAM,CAAApD,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACS,GAAG,CAAC,qBAAqB,CAAC,CAC3D,MAAO,CAAAD,QAAQ,CACjB,CAAC,CAED;AACAqD,iBAAiB,CAAE,KAAAA,CAAA,GAAY,CAC7B,KAAM,CAAArD,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACS,GAAG,CAAC,gCAAgC,CAAC,CACtE,MAAO,CAAAD,QAAQ,CACjB,CAAC,CAED;AACAsD,cAAc,CAAE,KAAO,CAAAC,QAAQ,EAAK,CAClC,KAAM,CAAAvD,QAAQ,CAAG,KAAM,CAAAR,SAAS,CAACS,GAAG,wBAAAG,MAAA,CAAwBmD,QAAQ,UAAQ,CAAC,CAC7E,MAAO,CAAAvD,QAAQ,CACjB,CACF,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAwD,gBAAgB,CAAG/D,qBAAqB,CAACC,KAAK,CAC3D,MAAO,MAAM,CAAA+D,kBAAkB,CAAGhE,qBAAqB,CAACgC,OAAO,CAC/D,MAAO,MAAM,CAAAiC,oBAAoB,CAAGjE,qBAAqB,CAACqD,aAAa,CACvE,MAAO,MAAM,CAAAa,qBAAqB,CAAGlE,qBAAqB,CAACuB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}