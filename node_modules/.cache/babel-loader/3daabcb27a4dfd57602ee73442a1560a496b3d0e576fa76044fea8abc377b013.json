{"ast":null,"code":"import apiClient from './api';\nimport { userManagementService, adminUserService, userProfileService, passwordResetService, roleManagementService } from './userManagement';\nimport { dashboardService } from './dashboardService';\n\n// ==================== AUTH SERVICE ====================\nexport const authService = {\n  // Register new user\n  register: async userData => {\n    const response = await apiClient.post('/api/v1/auth/register', userData);\n    return response.data;\n  },\n  // Login user\n  login: async credentials => {\n    const response = await apiClient.post('/api/v1/auth/login', credentials);\n    return response.data;\n  },\n  // Get current user account\n  getAccount: async () => {\n    const response = await apiClient.get('/api/v1/auth/account');\n    return response.data;\n  },\n  // Logout user\n  logout: async () => {\n    const response = await apiClient.post('/api/v1/auth/logout');\n    return response.data;\n  },\n  // Refresh token\n  refreshToken: async () => {\n    const response = await apiClient.post('/api/v1/auth/refresh');\n    return response.data;\n  }\n};\n\n// ==================== TOURNAMENT SERVICE ====================\nexport const tournamentService = {\n  // Get all tournaments\n  getAllTournaments: async (params = {}) => {\n    console.log('üèüÔ∏è [TournamentService] Getting all tournaments with params:', params);\n    try {\n      const response = await apiClient.get('/api/tournaments', {\n        params\n      });\n      console.log('‚úÖ [TournamentService] Get all tournaments success:', response);\n\n      // Backend returns PaginatedResponseDTO format\n      // Transform to expected frontend format\n      if (response && response.data) {\n        var _response$data, _response$data2;\n        return {\n          data: response.data,\n          pagination: response.pagination || {\n            currentPage: params.page || 1,\n            totalPages: Math.ceil((((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.length) || 0) / (params.limit || 10)),\n            totalItems: ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.length) || 0,\n            hasNext: false,\n            hasPrev: false\n          }\n        };\n      }\n      return response;\n    } catch (error) {\n      console.error('‚ùå [TournamentService] Get all tournaments failed:', error);\n      throw error;\n    }\n  },\n  // Get tournament by ID\n  getTournamentById: async id => {\n    console.log('üèüÔ∏è [TournamentService] Getting tournament by ID:', id);\n    try {\n      const response = await apiClient.get(`/api/tournaments/${id}`);\n      console.log('‚úÖ [TournamentService] Get tournament by ID success:', response);\n      return response;\n    } catch (error) {\n      console.error('‚ùå [TournamentService] Get tournament by ID failed:', error);\n      throw error;\n    }\n  },\n  // Create tournament\n  createTournament: async tournamentData => {\n    console.log('üèüÔ∏è [TournamentService] Creating tournament with data:', tournamentData);\n    try {\n      const response = await apiClient.post('/api/tournaments', tournamentData);\n      console.log('‚úÖ [TournamentService] Create tournament success:', response);\n      return response;\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('‚ùå [TournamentService] Create tournament failed:', error);\n      console.error('Error details:', {\n        status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n        data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n        message: error.message\n      });\n      throw error;\n    }\n  },\n  // Update tournament\n  updateTournament: async (id, tournamentData) => {\n    console.log('üèüÔ∏è [TournamentService] Updating tournament:', id, tournamentData);\n    try {\n      const response = await apiClient.put(`/api/tournaments/${id}`, tournamentData);\n      console.log('‚úÖ [TournamentService] Update tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('‚ùå [TournamentService] Update tournament failed:', error);\n      throw error;\n    }\n  },\n  // Delete tournament\n  deleteTournament: async id => {\n    console.log('üèüÔ∏è [TournamentService] Deleting tournament:', id);\n    try {\n      const response = await apiClient.delete(`/api/tournaments/${id}`);\n      console.log('‚úÖ [TournamentService] Delete tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('‚ùå [TournamentService] Delete tournament failed:', error);\n      throw error;\n    }\n  },\n  // Start tournament\n  startTournament: async id => {\n    console.log('üèüÔ∏è [TournamentService] Starting tournament:', id);\n    try {\n      const response = await apiClient.post(`/api/tournaments/${id}/start`);\n      console.log('‚úÖ [TournamentService] Start tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('‚ùå [TournamentService] Start tournament failed:', error);\n      throw error;\n    }\n  },\n  // Get current round from dedicated endpoint\n  getCurrentRound: async tournamentId => {\n    console.log('üéØ [TournamentService] Getting current round for tournament:', tournamentId);\n    try {\n      const response = await apiClient.get(`/api/tournaments/${tournamentId}/current-round`);\n      console.log('‚úÖ [TournamentService] Get current round success:', response);\n      return response;\n    } catch (error) {\n      console.error('‚ùå [TournamentService] Get current round failed:', error);\n      // Fallback format to match API response structure\n      return {\n        data: {\n          success: false,\n          data: {\n            currentRound: 1,\n            tournamentId: tournamentId,\n            tournamentName: \"Unknown\",\n            totalRounds: 1,\n            completedRounds: 0\n          }\n        }\n      };\n    }\n  }\n};\n\n// ==================== TOURNAMENT KNOCKOUT SERVICE ====================\nexport const tournamentKnockoutService = {\n  // Generate tournament bracket\n  generateBracket: async (tournamentId, bracketData) => {\n    console.log('üéØ [TournamentKnockout] Generating bracket for tournament:', tournamentId);\n    console.log('Data:', bracketData);\n    try {\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/generate-bracket`, bracketData);\n      console.log('‚úÖ [TournamentKnockout] Generate bracket success:', response);\n      return response;\n    } catch (error) {\n      console.error('‚ùå [TournamentKnockout] Generate bracket failed:', error);\n      throw error;\n    }\n  },\n  // Start knockout tournament\n  startKnockout: async tournamentId => {\n    console.log('üöÄ [TournamentKnockout] Starting knockout tournament:', tournamentId);\n    try {\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/start-knockout`);\n      console.log('‚úÖ [TournamentKnockout] Start knockout success:', response);\n      return response;\n    } catch (error) {\n      console.error('‚ùå [TournamentKnockout] Start knockout failed:', error);\n      throw error;\n    }\n  },\n  // Advance to next round\n  advanceRound: async tournamentId => {\n    console.log('‚è≠Ô∏è [TournamentKnockout] Advancing round for tournament:', tournamentId);\n    try {\n      const response = await apiClient.get(`/api/tournaments/${tournamentId}/current-round`);\n      console.log('‚úÖ [TournamentKnockout] Advance round success:', response);\n      return response;\n    } catch (error) {\n      console.error('‚ùå [TournamentKnockout] Advance round failed:', error);\n      throw error;\n    }\n  },\n  // Complete tournament\n  completeTournament: async tournamentId => {\n    console.log('üèÜ [TournamentKnockout] Completing tournament:', tournamentId);\n    try {\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/complete`);\n      console.log('‚úÖ [TournamentKnockout] Complete tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('‚ùå [TournamentKnockout] Complete tournament failed:', error);\n      throw error;\n    }\n  }\n};\n\n// ==================== TEAM SERVICE ====================\nexport const teamService = {\n  // Get teams by tournament\n  getTeamsByTournament: async tournamentId => {\n    console.log('üë• [TeamService] Getting teams by tournament ID:', tournamentId);\n    try {\n      const response = await apiClient.get(`/api/tournaments/${tournamentId}/teams`);\n      console.log('‚úÖ [TeamService] Get teams by tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('‚ùå [TeamService] Get teams by tournament failed:', error);\n      throw error;\n    }\n  },\n  // Get team by ID\n  getTeamById: async id => {\n    const response = await apiClient.get(`/api/teams/${id}`);\n    return response.data;\n  },\n  // Register team for tournament\n  registerTeam: async (tournamentId, teamData) => {\n    console.log('üöÄ [TeamService] Register team request:');\n    console.log('  Tournament ID:', tournamentId);\n    console.log('  Team Data:', teamData);\n    console.log('  Full URL:', `/api/tournaments/${tournamentId}/register`);\n    console.log('  Token:', localStorage.getItem('accessToken') ? 'Present' : 'Missing');\n    try {\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/register`, teamData);\n      console.log('‚úÖ [TeamService] Register team success:', response);\n      return response;\n    } catch (error) {\n      var _error$response3, _error$response4, _error$response5;\n      console.error('‚ùå [TeamService] Register team failed:');\n      console.error('  Status:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status);\n      console.error('  Data:', (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data);\n      console.error('  Headers:', (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.headers);\n      console.error('  Request config:', error.config);\n      throw error;\n    }\n  },\n  // Update team\n  updateTeam: async (id, teamData) => {\n    const response = await apiClient.put(`/api/teams/${id}`, teamData);\n    return response.data;\n  },\n  // Delete team\n  deleteTeam: async id => {\n    const response = await apiClient.delete(`/api/teams/${id}`);\n    return response.data;\n  }\n};\n\n// ==================== MATCH SERVICE ====================\nexport const matchService = {\n  // Get matches by tournament\n  getMatchesByTournament: async (tournamentId, params = {}) => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/matches`, {\n      params\n    });\n    return response.data;\n  },\n  // Get match by ID\n  getMatchById: async id => {\n    const response = await apiClient.get(`/api/matches/${id}`);\n    return response.data;\n  },\n  // Create match\n  createMatch: async (tournamentId, matchData) => {\n    const response = await apiClient.post(`/api/tournaments/${tournamentId}/matches`, matchData);\n    return response.data;\n  },\n  // Update match score\n  updateMatchScore: async (id, scoreData) => {\n    const response = await apiClient.put(`/api/matches/${id}/score`, scoreData);\n    return response.data;\n  },\n  // Update match status\n  updateMatchStatus: async (id, statusData) => {\n    const response = await apiClient.put(`/api/matches/${id}/status`, statusData);\n    return response.data;\n  },\n  // Get tournament bracket\n  getTournamentBracket: async tournamentId => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/bracket`);\n    return response.data;\n  }\n};\n\n// ==================== NEWS SERVICE ====================\nexport const newsService = {\n  // Get all news\n  getAllNews: async () => {\n    const response = await apiClient.get('/api/v1/news');\n    return response.data;\n  },\n  // Get news by ID\n  getNewsById: async id => {\n    const response = await apiClient.get(`/api/v1/news/${id}`);\n    return response.data;\n  },\n  // Create news\n  createNews: async newsData => {\n    const response = await apiClient.post('/api/v1/news', newsData);\n    return response.data;\n  },\n  // Update news\n  updateNews: async (id, newsData) => {\n    const response = await apiClient.put(`/api/v1/news/${id}`, newsData);\n    return response.data;\n  },\n  // Delete news\n  deleteNews: async id => {\n    const response = await apiClient.delete(`/api/v1/news/${id}`);\n    return response.data;\n  },\n  // Upload files for news\n  uploadFiles: async (newsId, files) => {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('files', file);\n    });\n    const response = await apiClient.post(`/api/v1/news/uploads/${newsId}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Get image\n  getImage: async imageName => {\n    const response = await apiClient.get(`/api/v1/news/image/${imageName}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n};\n\n// ==================== USER MANAGEMENT SERVICE ====================\n// Note: Backend doesn't have dedicated admin/user management endpoints\n// These would need to be implemented in backend\nexport const userService = {\n  // Get current user profile (using auth account endpoint)\n  getCurrentUser: async () => {\n    return authService.getAccount();\n  }\n\n  // Note: The following endpoints need to be implemented in backend\n  // getAllUsers: async (params = {}) => { /* Backend needs implementation */ },\n  // updateUser: async (userId, userData) => { /* Backend needs implementation */ },\n  // deleteUser: async (userId) => { /* Backend needs implementation */ },\n  // getUserById: async (userId) => { /* Backend needs implementation */ },\n};\n\n// ==================== SYSTEM/ADMIN SERVICE ====================\n// Note: Backend doesn't have system/admin endpoints\n// These would need to be implemented in backend\nexport const systemService = {\n  // Note: The following endpoints need to be implemented in backend\n  // getSystemStats: async () => { /* Backend needs implementation */ },\n  // getSystemHealth: async () => { /* Backend needs implementation */ },\n  // getApplicationLogs: async (params = {}) => { /* Backend needs implementation */ },\n};\n\n// ==================== DEBUG SERVICE ====================\n// Note: Backend has DebugController but endpoints are not documented\nexport const debugService = {\n  // Note: Check backend DebugController for available endpoints\n  // Backend implementation needed for proper debug endpoints\n};\n\n// ==================== USER MANAGEMENT SERVICE ====================\nexport { userManagementService, adminUserService, userProfileService, passwordResetService, roleManagementService };\n\n// ==================== DASHBOARD SERVICE ====================\nexport { dashboardService };\n\n// ==================== EXPORT ALL SERVICES ====================\nexport const apiServices = {\n  auth: authService,\n  tournament: tournamentService,\n  tournamentKnockout: tournamentKnockoutService,\n  team: teamService,\n  match: matchService,\n  news: newsService,\n  user: userService,\n  userManagement: userManagementService,\n  adminUser: adminUserService,\n  userProfile: userProfileService,\n  passwordReset: passwordResetService,\n  roleManagement: roleManagementService,\n  system: systemService,\n  debug: debugService,\n  dashboard: dashboardService\n};\n\n// For backward compatibility\nexport const adminService = systemService;\nexport default apiServices;","map":{"version":3,"names":["apiClient","userManagementService","adminUserService","userProfileService","passwordResetService","roleManagementService","dashboardService","authService","register","userData","response","post","data","login","credentials","getAccount","get","logout","refreshToken","tournamentService","getAllTournaments","params","console","log","_response$data","_response$data2","pagination","currentPage","page","totalPages","Math","ceil","length","limit","totalItems","hasNext","hasPrev","error","getTournamentById","id","createTournament","tournamentData","_error$response","_error$response2","status","message","updateTournament","put","deleteTournament","delete","startTournament","getCurrentRound","tournamentId","success","currentRound","tournamentName","totalRounds","completedRounds","tournamentKnockoutService","generateBracket","bracketData","startKnockout","advanceRound","completeTournament","teamService","getTeamsByTournament","getTeamById","registerTeam","teamData","localStorage","getItem","_error$response3","_error$response4","_error$response5","headers","config","updateTeam","deleteTeam","matchService","getMatchesByTournament","getMatchById","createMatch","matchData","updateMatchScore","scoreData","updateMatchStatus","statusData","getTournamentBracket","newsService","getAllNews","getNewsById","createNews","newsData","updateNews","deleteNews","uploadFiles","newsId","files","formData","FormData","forEach","file","append","getImage","imageName","responseType","userService","getCurrentUser","systemService","debugService","apiServices","auth","tournament","tournamentKnockout","team","match","news","user","userManagement","adminUser","userProfile","passwordReset","roleManagement","system","debug","dashboard","adminService"],"sources":["C:/Users/ACER/Desktop/fe/fe-edu/src/services/index.js"],"sourcesContent":["import apiClient from './api';\r\nimport { \r\n  userManagementService, \r\n  adminUserService, \r\n  userProfileService, \r\n  passwordResetService, \r\n  roleManagementService \r\n} from './userManagement';\r\nimport { dashboardService } from './dashboardService';\r\n\r\n// ==================== AUTH SERVICE ====================\r\nexport const authService = {\r\n  // Register new user\r\n  register: async (userData) => {\r\n    const response = await apiClient.post('/api/v1/auth/register', userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Login user\r\n  login: async (credentials) => {\r\n    const response = await apiClient.post('/api/v1/auth/login', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  // Get current user account\r\n  getAccount: async () => {\r\n    const response = await apiClient.get('/api/v1/auth/account');\r\n    return response.data;\r\n  },\r\n\r\n  // Logout user\r\n  logout: async () => {\r\n    const response = await apiClient.post('/api/v1/auth/logout');\r\n    return response.data;\r\n  },\r\n\r\n  // Refresh token\r\n  refreshToken: async () => {\r\n    const response = await apiClient.post('/api/v1/auth/refresh');\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// ==================== TOURNAMENT SERVICE ====================\r\nexport const tournamentService = {\r\n  // Get all tournaments\r\n  getAllTournaments: async (params = {}) => {\r\n    console.log('üèüÔ∏è [TournamentService] Getting all tournaments with params:', params);\r\n    try {\r\n      const response = await apiClient.get('/api/tournaments', { params });\r\n      console.log('‚úÖ [TournamentService] Get all tournaments success:', response);\r\n      \r\n      // Backend returns PaginatedResponseDTO format\r\n      // Transform to expected frontend format\r\n      if (response && response.data) {\r\n        return {\r\n          data: response.data,\r\n          pagination: response.pagination || {\r\n            currentPage: params.page || 1,\r\n            totalPages: Math.ceil((response.data?.length || 0) / (params.limit || 10)),\r\n            totalItems: response.data?.length || 0,\r\n            hasNext: false,\r\n            hasPrev: false\r\n          }\r\n        };\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('‚ùå [TournamentService] Get all tournaments failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get tournament by ID\r\n  getTournamentById: async (id) => {\r\n    console.log('üèüÔ∏è [TournamentService] Getting tournament by ID:', id);\r\n    try {\r\n      const response = await apiClient.get(`/api/tournaments/${id}`);\r\n      console.log('‚úÖ [TournamentService] Get tournament by ID success:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('‚ùå [TournamentService] Get tournament by ID failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Create tournament\r\n  createTournament: async (tournamentData) => {\r\n    console.log('üèüÔ∏è [TournamentService] Creating tournament with data:', tournamentData);\r\n    try {\r\n      const response = await apiClient.post('/api/tournaments', tournamentData);\r\n      console.log('‚úÖ [TournamentService] Create tournament success:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('‚ùå [TournamentService] Create tournament failed:', error);\r\n      console.error('Error details:', {\r\n        status: error.response?.status,\r\n        data: error.response?.data,\r\n        message: error.message\r\n      });\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update tournament\r\n  updateTournament: async (id, tournamentData) => {\r\n    console.log('üèüÔ∏è [TournamentService] Updating tournament:', id, tournamentData);\r\n    try {\r\n      const response = await apiClient.put(`/api/tournaments/${id}`, tournamentData);\r\n      console.log('‚úÖ [TournamentService] Update tournament success:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('‚ùå [TournamentService] Update tournament failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete tournament\r\n  deleteTournament: async (id) => {\r\n    console.log('üèüÔ∏è [TournamentService] Deleting tournament:', id);\r\n    try {\r\n      const response = await apiClient.delete(`/api/tournaments/${id}`);\r\n      console.log('‚úÖ [TournamentService] Delete tournament success:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('‚ùå [TournamentService] Delete tournament failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Start tournament\r\n  startTournament: async (id) => {\r\n    console.log('üèüÔ∏è [TournamentService] Starting tournament:', id);\r\n    try {\r\n      const response = await apiClient.post(`/api/tournaments/${id}/start`);\r\n      console.log('‚úÖ [TournamentService] Start tournament success:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('‚ùå [TournamentService] Start tournament failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get current round from dedicated endpoint\r\n  getCurrentRound: async (tournamentId) => {\r\n    console.log('üéØ [TournamentService] Getting current round for tournament:', tournamentId);\r\n    try {\r\n      const response = await apiClient.get(`/api/tournaments/${tournamentId}/current-round`);\r\n      console.log('‚úÖ [TournamentService] Get current round success:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('‚ùå [TournamentService] Get current round failed:', error);\r\n      // Fallback format to match API response structure\r\n      return { \r\n        data: { \r\n          success: false,\r\n          data: { \r\n            currentRound: 1, \r\n            tournamentId: tournamentId,\r\n            tournamentName: \"Unknown\",\r\n            totalRounds: 1,\r\n            completedRounds: 0\r\n          } \r\n        } \r\n      };\r\n    }\r\n  },\r\n};\r\n\r\n// ==================== TOURNAMENT KNOCKOUT SERVICE ====================\r\nexport const tournamentKnockoutService = {\r\n  // Generate tournament bracket\r\n  generateBracket: async (tournamentId, bracketData) => {\r\n    console.log('üéØ [TournamentKnockout] Generating bracket for tournament:', tournamentId);\r\n    console.log('Data:', bracketData);\r\n    try {\r\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/generate-bracket`, bracketData);\r\n      console.log('‚úÖ [TournamentKnockout] Generate bracket success:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('‚ùå [TournamentKnockout] Generate bracket failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Start knockout tournament\r\n  startKnockout: async (tournamentId) => {\r\n    console.log('üöÄ [TournamentKnockout] Starting knockout tournament:', tournamentId);\r\n    try {\r\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/start-knockout`);\r\n      console.log('‚úÖ [TournamentKnockout] Start knockout success:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('‚ùå [TournamentKnockout] Start knockout failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Advance to next round\r\n  advanceRound: async (tournamentId) => {\r\n    console.log('‚è≠Ô∏è [TournamentKnockout] Advancing round for tournament:', tournamentId);\r\n    try {\r\n      const response = await apiClient.get(`/api/tournaments/${tournamentId}/current-round`);\r\n      console.log('‚úÖ [TournamentKnockout] Advance round success:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('‚ùå [TournamentKnockout] Advance round failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Complete tournament\r\n  completeTournament: async (tournamentId) => {\r\n    console.log('üèÜ [TournamentKnockout] Completing tournament:', tournamentId);\r\n    try {\r\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/complete`);\r\n      console.log('‚úÖ [TournamentKnockout] Complete tournament success:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('‚ùå [TournamentKnockout] Complete tournament failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\n// ==================== TEAM SERVICE ====================\r\nexport const teamService = {\r\n  // Get teams by tournament\r\n  getTeamsByTournament: async (tournamentId) => {\r\n    console.log('üë• [TeamService] Getting teams by tournament ID:', tournamentId);\r\n    try {\r\n      const response = await apiClient.get(`/api/tournaments/${tournamentId}/teams`);\r\n      console.log('‚úÖ [TeamService] Get teams by tournament success:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('‚ùå [TeamService] Get teams by tournament failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get team by ID\r\n  getTeamById: async (id) => {\r\n    const response = await apiClient.get(`/api/teams/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Register team for tournament\r\n  registerTeam: async (tournamentId, teamData) => {\r\n    console.log('üöÄ [TeamService] Register team request:');\r\n    console.log('  Tournament ID:', tournamentId);\r\n    console.log('  Team Data:', teamData);\r\n    console.log('  Full URL:', `/api/tournaments/${tournamentId}/register`);\r\n    console.log('  Token:', localStorage.getItem('accessToken') ? 'Present' : 'Missing');\r\n    \r\n    try {\r\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/register`, teamData);\r\n      console.log('‚úÖ [TeamService] Register team success:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('‚ùå [TeamService] Register team failed:');\r\n      console.error('  Status:', error.response?.status);\r\n      console.error('  Data:', error.response?.data);\r\n      console.error('  Headers:', error.response?.headers);\r\n      console.error('  Request config:', error.config);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update team\r\n  updateTeam: async (id, teamData) => {\r\n    const response = await apiClient.put(`/api/teams/${id}`, teamData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete team\r\n  deleteTeam: async (id) => {\r\n    const response = await apiClient.delete(`/api/teams/${id}`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// ==================== MATCH SERVICE ====================\r\nexport const matchService = {\r\n  // Get matches by tournament\r\n  getMatchesByTournament: async (tournamentId, params = {}) => {\r\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/matches`, { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get match by ID\r\n  getMatchById: async (id) => {\r\n    const response = await apiClient.get(`/api/matches/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create match\r\n  createMatch: async (tournamentId, matchData) => {\r\n    const response = await apiClient.post(`/api/tournaments/${tournamentId}/matches`, matchData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update match score\r\n  updateMatchScore: async (id, scoreData) => {\r\n    const response = await apiClient.put(`/api/matches/${id}/score`, scoreData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update match status\r\n  updateMatchStatus: async (id, statusData) => {\r\n    const response = await apiClient.put(`/api/matches/${id}/status`, statusData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get tournament bracket\r\n  getTournamentBracket: async (tournamentId) => {\r\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/bracket`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// ==================== NEWS SERVICE ====================\r\nexport const newsService = {\r\n  // Get all news\r\n  getAllNews: async () => {\r\n    const response = await apiClient.get('/api/v1/news');\r\n    return response.data;\r\n  },\r\n\r\n  // Get news by ID\r\n  getNewsById: async (id) => {\r\n    const response = await apiClient.get(`/api/v1/news/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create news\r\n  createNews: async (newsData) => {\r\n    const response = await apiClient.post('/api/v1/news', newsData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update news\r\n  updateNews: async (id, newsData) => {\r\n    const response = await apiClient.put(`/api/v1/news/${id}`, newsData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete news\r\n  deleteNews: async (id) => {\r\n    const response = await apiClient.delete(`/api/v1/news/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Upload files for news\r\n  uploadFiles: async (newsId, files) => {\r\n    const formData = new FormData();\r\n    files.forEach(file => {\r\n      formData.append('files', file);\r\n    });\r\n    \r\n    const response = await apiClient.post(`/api/v1/news/uploads/${newsId}`, formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' }\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get image\r\n  getImage: async (imageName) => {\r\n    const response = await apiClient.get(`/api/v1/news/image/${imageName}`, {\r\n      responseType: 'blob'\r\n    });\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// ==================== USER MANAGEMENT SERVICE ====================\r\n// Note: Backend doesn't have dedicated admin/user management endpoints\r\n// These would need to be implemented in backend\r\nexport const userService = {\r\n  // Get current user profile (using auth account endpoint)\r\n  getCurrentUser: async () => {\r\n    return authService.getAccount();\r\n  },\r\n\r\n  // Note: The following endpoints need to be implemented in backend\r\n  // getAllUsers: async (params = {}) => { /* Backend needs implementation */ },\r\n  // updateUser: async (userId, userData) => { /* Backend needs implementation */ },\r\n  // deleteUser: async (userId) => { /* Backend needs implementation */ },\r\n  // getUserById: async (userId) => { /* Backend needs implementation */ },\r\n};\r\n\r\n// ==================== SYSTEM/ADMIN SERVICE ====================\r\n// Note: Backend doesn't have system/admin endpoints\r\n// These would need to be implemented in backend\r\nexport const systemService = {\r\n  // Note: The following endpoints need to be implemented in backend\r\n  // getSystemStats: async () => { /* Backend needs implementation */ },\r\n  // getSystemHealth: async () => { /* Backend needs implementation */ },\r\n  // getApplicationLogs: async (params = {}) => { /* Backend needs implementation */ },\r\n};\r\n\r\n// ==================== DEBUG SERVICE ====================\r\n// Note: Backend has DebugController but endpoints are not documented\r\nexport const debugService = {\r\n  // Note: Check backend DebugController for available endpoints\r\n  // Backend implementation needed for proper debug endpoints\r\n};\r\n\r\n// ==================== USER MANAGEMENT SERVICE ====================\r\nexport { \r\n  userManagementService,\r\n  adminUserService,\r\n  userProfileService, \r\n  passwordResetService,\r\n  roleManagementService\r\n};\r\n\r\n// ==================== DASHBOARD SERVICE ====================\r\nexport { dashboardService };\r\n\r\n// ==================== EXPORT ALL SERVICES ====================\r\nexport const apiServices = {\r\n  auth: authService,\r\n  tournament: tournamentService,\r\n  tournamentKnockout: tournamentKnockoutService,\r\n  team: teamService,\r\n  match: matchService,\r\n  news: newsService,\r\n  user: userService,\r\n  userManagement: userManagementService,\r\n  adminUser: adminUserService,\r\n  userProfile: userProfileService,\r\n  passwordReset: passwordResetService,\r\n  roleManagement: roleManagementService,\r\n  system: systemService,\r\n  debug: debugService,\r\n  dashboard: dashboardService,\r\n};\r\n\r\n// For backward compatibility\r\nexport const adminService = systemService;\r\n\r\nexport default apiServices;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}