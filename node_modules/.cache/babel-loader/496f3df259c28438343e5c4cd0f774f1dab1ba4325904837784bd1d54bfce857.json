{"ast":null,"code":"import apiClient from './apiClient';\nimport { createFileUploadConfig } from './apiClient';\nconst API_BASE_PATH = '/api/v1/news';\nconst newsService = {\n  // Get all news articles\n  getAllNews: async () => {\n    try {\n      const response = await apiClient.get(API_BASE_PATH);\n\n      // Handle different response structures\n      let newsList;\n      if (Array.isArray(response)) {\n        newsList = response;\n      } else if (response !== null && response !== void 0 && response.data && Array.isArray(response.data)) {\n        newsList = response.data;\n      } else if (response !== null && response !== void 0 && response.content && Array.isArray(response.content)) {\n        newsList = response.content;\n      } else if (response !== null && response !== void 0 && response.items && Array.isArray(response.items)) {\n        newsList = response.items;\n      } else {\n        newsList = [];\n      }\n      return Array.isArray(newsList) ? newsList : [];\n    } catch (error) {\n      console.error('Error fetching news:', error);\n      throw error;\n    }\n  },\n  // Get news by ID\n  getNewsById: async id => {\n    try {\n      const newsArticle = await apiClient.get(`${API_BASE_PATH}/${id}`);\n      return newsArticle;\n    } catch (error) {\n      console.error(`Error fetching news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  createNews: async newsData => {\n    try {\n      const response = await apiClient.post(API_BASE_PATH, newsData);\n      return (response === null || response === void 0 ? void 0 : response.data) || response;\n    } catch (error) {\n      console.error('Error creating news:', error);\n      throw error;\n    }\n  },\n  // Update a news article\n  updateNews: async (id, newsData) => {\n    try {\n      const response = await apiClient.put(`${API_BASE_PATH}/${id}`, newsData);\n      return response;\n    } catch (error) {\n      console.error(`Error updating news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  // Delete a news article\n  deleteNews: async id => {\n    try {\n      const response = await apiClient.delete(`${API_BASE_PATH}/${id}`);\n      return response;\n    } catch (error) {\n      console.error(`Error deleting news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  uploadNewsAttachments: async (newsId, file, onUploadProgress) => {\n    try {\n      const formData = new FormData();\n      formData.append('files', file);\n      const config = createFileUploadConfig(onUploadProgress);\n      const response = await apiClient.post(`${API_BASE_PATH}/uploads/${newsId}`, formData, config);\n      return response;\n    } catch (error) {\n      console.error(`Error uploading attachment for news ID ${newsId}:`, error);\n      throw error;\n    }\n  },\n  getImageUrl: imageName => {\n    return `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}/image/${imageName}`;\n  }\n};\nexport default newsService;","map":{"version":3,"names":["apiClient","createFileUploadConfig","API_BASE_PATH","newsService","getAllNews","response","get","newsList","Array","isArray","data","content","items","error","console","getNewsById","id","newsArticle","createNews","newsData","post","updateNews","put","deleteNews","delete","uploadNewsAttachments","newsId","file","onUploadProgress","formData","FormData","append","config","getImageUrl","imageName","process","env","REACT_APP_API_URL"],"sources":["/Users/lucas/Desktop/an/fe-edu/src/services/newsService.js"],"sourcesContent":["import apiClient from './apiClient'; \nimport { createFileUploadConfig } from './apiClient'; \n\nconst API_BASE_PATH = '/api/v1/news';\n\nconst newsService = {\n  // Get all news articles\n  getAllNews: async () => {\n    try {\n      const response = await apiClient.get(API_BASE_PATH);\n      \n      // Handle different response structures\n      let newsList;\n      if (Array.isArray(response)) {\n        newsList = response;\n      } else if (response?.data && Array.isArray(response.data)) {\n        newsList = response.data;\n      } else if (response?.content && Array.isArray(response.content)) {\n        newsList = response.content;\n      } else if (response?.items && Array.isArray(response.items)) {\n        newsList = response.items;\n      } else {\n        newsList = [];\n      }\n      \n      return Array.isArray(newsList) ? newsList : [];\n    } catch (error) {\n      console.error('Error fetching news:', error);\n      throw error; \n    }\n  },\n\n  // Get news by ID\n  getNewsById: async (id) => {\n    try {\n      const newsArticle = await apiClient.get(`${API_BASE_PATH}/${id}`);\n      return newsArticle;\n    } catch (error) {\n      console.error(`Error fetching news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  createNews: async (newsData) => {\n    try {\n      const response = await apiClient.post(API_BASE_PATH, newsData);\n      return response?.data || response;\n    } catch (error) {\n      console.error('Error creating news:', error);\n      throw error;\n    }\n  },\n\n  // Update a news article\n  updateNews: async (id, newsData) => {\n    try {\n      const response = await apiClient.put(`${API_BASE_PATH}/${id}`, newsData);\n      return response;\n    } catch (error) {\n      console.error(`Error updating news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  // Delete a news article\n  deleteNews: async (id) => {\n    try {\n      const response = await apiClient.delete(`${API_BASE_PATH}/${id}`);\n      return response;\n    } catch (error) {\n      console.error(`Error deleting news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  uploadNewsAttachments: async (newsId, file, onUploadProgress) => {\n    try {\n      const formData = new FormData();\n      formData.append('files', file); \n\n      const config = createFileUploadConfig(onUploadProgress);\n      const response = await apiClient.post(`${API_BASE_PATH}/uploads/${newsId}`, formData, config);\n      return response;\n    } catch (error) {\n      console.error(`Error uploading attachment for news ID ${newsId}:`, error);\n      throw error;\n    }\n  },\n\n  getImageUrl: (imageName) => {\n    return `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}/image/${imageName}`;\n  }\n};\n\nexport default newsService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}