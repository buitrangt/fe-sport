{"ast":null,"code":"// Image utilities for tournament images\nexport const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\n/**\n * Get full URL for tournament image\n * @param {string} imageUrl - The image filename from backend\n * @returns {string} Full URL to the image\n */\nexport const getTournamentImageUrl = imageUrl => {\n  if (!imageUrl) return null;\n  return `${API_BASE_URL}/api/files/tournaments/${imageUrl}`;\n};\n\n/**\n * Default tournament image placeholder\n */\nexport const DEFAULT_TOURNAMENT_IMAGE = '/images/tournament-placeholder.png';\n\n/**\n * Image validation utilities\n */\nexport const IMAGE_VALIDATION = {\n  MAX_SIZE: 5 * 1024 * 1024,\n  // 5MB\n  ALLOWED_TYPES: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'],\n  ALLOWED_EXTENSIONS: ['jpg', 'jpeg', 'png', 'gif']\n};\n\n/**\n * Validate image file\n * @param {File} file - The file to validate\n * @returns {Object} Validation result with isValid and error message\n */\nexport const validateImageFile = file => {\n  if (!file) {\n    return {\n      isValid: false,\n      error: 'No file selected'\n    };\n  }\n\n  // Check file type\n  if (!IMAGE_VALIDATION.ALLOWED_TYPES.includes(file.type)) {\n    return {\n      isValid: false,\n      error: `Invalid file type. Allowed types: ${IMAGE_VALIDATION.ALLOWED_TYPES.join(', ')}`\n    };\n  }\n\n  // Check file size\n  if (file.size > IMAGE_VALIDATION.MAX_SIZE) {\n    return {\n      isValid: false,\n      error: `File size too large. Maximum size: ${IMAGE_VALIDATION.MAX_SIZE / 1024 / 1024}MB`\n    };\n  }\n  return {\n    isValid: true,\n    error: null\n  };\n};\n\n/**\n * Format file size for display\n * @param {number} bytes - File size in bytes\n * @returns {string} Formatted file size\n */\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","getTournamentImageUrl","imageUrl","DEFAULT_TOURNAMENT_IMAGE","IMAGE_VALIDATION","MAX_SIZE","ALLOWED_TYPES","ALLOWED_EXTENSIONS","validateImageFile","file","isValid","error","includes","type","join","size","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed"],"sources":["C:/Users/ACER/Desktop/fe/fe-sport/src/utils/imageUtils.js"],"sourcesContent":["// Image utilities for tournament images\nexport const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\n/**\n * Get full URL for tournament image\n * @param {string} imageUrl - The image filename from backend\n * @returns {string} Full URL to the image\n */\nexport const getTournamentImageUrl = (imageUrl) => {\n  if (!imageUrl) return null;\n  return `${API_BASE_URL}/api/files/tournaments/${imageUrl}`;\n};\n\n/**\n * Default tournament image placeholder\n */\nexport const DEFAULT_TOURNAMENT_IMAGE = '/images/tournament-placeholder.png';\n\n/**\n * Image validation utilities\n */\nexport const IMAGE_VALIDATION = {\n  MAX_SIZE: 5 * 1024 * 1024, // 5MB\n  ALLOWED_TYPES: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'],\n  ALLOWED_EXTENSIONS: ['jpg', 'jpeg', 'png', 'gif']\n};\n\n/**\n * Validate image file\n * @param {File} file - The file to validate\n * @returns {Object} Validation result with isValid and error message\n */\nexport const validateImageFile = (file) => {\n  if (!file) {\n    return { isValid: false, error: 'No file selected' };\n  }\n\n  // Check file type\n  if (!IMAGE_VALIDATION.ALLOWED_TYPES.includes(file.type)) {\n    return { \n      isValid: false, \n      error: `Invalid file type. Allowed types: ${IMAGE_VALIDATION.ALLOWED_TYPES.join(', ')}` \n    };\n  }\n\n  // Check file size\n  if (file.size > IMAGE_VALIDATION.MAX_SIZE) {\n    return { \n      isValid: false, \n      error: `File size too large. Maximum size: ${IMAGE_VALIDATION.MAX_SIZE / 1024 / 1024}MB` \n    };\n  }\n\n  return { isValid: true, error: null };\n};\n\n/**\n * Format file size for display\n * @param {number} bytes - File size in bytes\n * @returns {string} Formatted file size\n */\nexport const formatFileSize = (bytes) => {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAEpF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAIC,QAAQ,IAAK;EACjD,IAAI,CAACA,QAAQ,EAAE,OAAO,IAAI;EAC1B,OAAO,GAAGL,YAAY,0BAA0BK,QAAQ,EAAE;AAC5D,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,wBAAwB,GAAG,oCAAoC;;AAE5E;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG;EAC9BC,QAAQ,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI;EAAE;EAC3BC,aAAa,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC;EACpEC,kBAAkB,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIC,IAAI,IAAK;EACzC,IAAI,CAACA,IAAI,EAAE;IACT,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAmB,CAAC;EACtD;;EAEA;EACA,IAAI,CAACP,gBAAgB,CAACE,aAAa,CAACM,QAAQ,CAACH,IAAI,CAACI,IAAI,CAAC,EAAE;IACvD,OAAO;MACLH,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,qCAAqCP,gBAAgB,CAACE,aAAa,CAACQ,IAAI,CAAC,IAAI,CAAC;IACvF,CAAC;EACH;;EAEA;EACA,IAAIL,IAAI,CAACM,IAAI,GAAGX,gBAAgB,CAACC,QAAQ,EAAE;IACzC,OAAO;MACLK,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,sCAAsCP,gBAAgB,CAACC,QAAQ,GAAG,IAAI,GAAG,IAAI;IACtF,CAAC;EACH;EAEA,OAAO;IAAEK,OAAO,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAK,CAAC;AACvC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,cAAc,GAAIC,KAAK,IAAK;EACvC,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS;EAEjC,MAAMC,CAAC,GAAG,IAAI;EACd,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EACzC,MAAMC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACN,KAAK,CAAC,GAAGI,IAAI,CAACE,GAAG,CAACL,CAAC,CAAC,CAAC;EAEnD,OAAOM,UAAU,CAAC,CAACP,KAAK,GAAGI,IAAI,CAACI,GAAG,CAACP,CAAC,EAAEE,CAAC,CAAC,EAAEM,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGP,KAAK,CAACC,CAAC,CAAC;AACzE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}