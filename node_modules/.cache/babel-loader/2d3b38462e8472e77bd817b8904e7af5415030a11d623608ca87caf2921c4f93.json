{"ast":null,"code":"// Environment and localStorage management utility\n\nexport const ENV_KEY = 'app_environment';\nexport const TOKEN_KEY = 'accessToken';\nexport const BUILD_TIMESTAMP_KEY = 'build_timestamp';\n\n// Get current environment\nexport const getCurrentEnv = () => {\n  return process.env.NODE_ENV || 'development';\n};\n\n// Get build timestamp (different for each build)\nexport const getBuildTimestamp = () => {\n  // Use build time or app version to detect new builds\n  return process.env.REACT_APP_BUILD_TIME || Date.now().toString();\n};\n\n// Check if this is a fresh build/deployment\nexport const isFreshBuild = () => {\n  const currentTimestamp = getBuildTimestamp();\n  const storedTimestamp = localStorage.getItem(BUILD_TIMESTAMP_KEY);\n  console.log('🔍 Build check:', {\n    current: currentTimestamp,\n    stored: storedTimestamp\n  });\n  return !storedTimestamp || storedTimestamp !== currentTimestamp;\n};\n\n// Check if environment changed since last run\nexport const hasEnvironmentChanged = () => {\n  const currentEnv = getCurrentEnv();\n  const storedEnv = localStorage.getItem(ENV_KEY);\n  console.log('🔍 Environment check:', {\n    current: currentEnv,\n    stored: storedEnv\n  });\n  return storedEnv && storedEnv !== currentEnv;\n};\n\n// Force clear localStorage for production builds\nexport const forceProductionClear = () => {\n  const currentEnv = getCurrentEnv();\n  if (currentEnv === 'production') {\n    console.log('🏭 Production environment detected, clearing authentication...');\n\n    // Always clear auth data in production for security\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem('user');\n    localStorage.removeItem('refreshToken');\n\n    // Clear any auth-related keys\n    const authKeys = ['token', 'auth', 'session', 'login', 'admin'];\n    Object.keys(localStorage).forEach(key => {\n      if (authKeys.some(authKey => key.toLowerCase().includes(authKey))) {\n        localStorage.removeItem(key);\n        console.log(`🗑️ [PRODUCTION] Removed: ${key}`);\n      }\n    });\n    console.log('✅ Production authentication cleared');\n    return true;\n  }\n  return false;\n};\n\n// Clear localStorage if environment changed\nexport const clearLocalStorageOnEnvChange = () => {\n  if (hasEnvironmentChanged()) {\n    console.log('🧹 Environment changed, clearing localStorage...');\n\n    // Clear auth-related data\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem('user');\n    localStorage.removeItem('refreshToken');\n\n    // Clear any other app-specific data that might be invalid\n    const keysToKeep = ['theme', 'language', 'preferences']; // Keep user preferences\n    const allKeys = Object.keys(localStorage);\n    allKeys.forEach(key => {\n      if (!keysToKeep.includes(key) && key !== ENV_KEY) {\n        localStorage.removeItem(key);\n        console.log(`🗑️ Removed: ${key}`);\n      }\n    });\n    console.log('✅ localStorage cleared for environment change');\n  }\n\n  // Update stored environment\n  const currentEnv = getCurrentEnv();\n  localStorage.setItem(ENV_KEY, currentEnv);\n  console.log('📝 Environment stored:', currentEnv);\n};\n\n// Check if token exists and is valid format\nexport const isValidToken = token => {\n  if (!token || typeof token !== 'string') {\n    return false;\n  }\n\n  // Basic token format validation\n  if (token.length < 10) {\n    return false;\n  }\n\n  // Check if it looks like a JWT token\n  if (token.includes('.') && token.split('.').length === 3) {\n    return true;\n  }\n\n  // Check if it's a basic token format\n  if (token.length > 20 && /^[A-Za-z0-9+/=.-]+$/.test(token)) {\n    return true;\n  }\n  return false;\n};\n\n// Clear invalid tokens\nexport const clearInvalidTokens = () => {\n  const token = localStorage.getItem(TOKEN_KEY);\n  if (token && !isValidToken(token)) {\n    console.log('🧹 Invalid token format detected, removing...');\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem('user');\n    return true;\n  }\n  return false;\n};\n\n// Initialize localStorage management\nexport const initializeLocalStorage = () => {\n  console.log('🚀 Initializing localStorage management...');\n\n  // 🔐 COMMENTED OUT: Auto-clear authentication (for testing)\n  // console.log('🧹 Clearing authentication for fresh start...');\n  // localStorage.removeItem(TOKEN_KEY);\n  // localStorage.removeItem('user');\n  // localStorage.removeItem('refreshToken');\n\n  // Clear any other auth-related data\n  // const authKeys = ['token', 'auth', 'session', 'login', 'admin'];\n  // Object.keys(localStorage).forEach(key => {\n  //   if (authKeys.some(authKey => key.toLowerCase().includes(authKey))) {\n  //     localStorage.removeItem(key);\n  //   }\n  // });\n\n  // Update build timestamp\n  const currentTimestamp = getBuildTimestamp();\n  localStorage.setItem(BUILD_TIMESTAMP_KEY, currentTimestamp);\n  console.log('✅ LocalStorage management initialized - auth tokens preserved');\n};","map":{"version":3,"names":["ENV_KEY","TOKEN_KEY","BUILD_TIMESTAMP_KEY","getCurrentEnv","process","env","NODE_ENV","getBuildTimestamp","REACT_APP_BUILD_TIME","Date","now","toString","isFreshBuild","currentTimestamp","storedTimestamp","localStorage","getItem","console","log","current","stored","hasEnvironmentChanged","currentEnv","storedEnv","forceProductionClear","removeItem","authKeys","Object","keys","forEach","key","some","authKey","toLowerCase","includes","clearLocalStorageOnEnvChange","keysToKeep","allKeys","setItem","isValidToken","token","length","split","test","clearInvalidTokens","initializeLocalStorage"],"sources":["C:/Users/ACER/Desktop/fe/fe-edu/src/utils/localStorageManager.js"],"sourcesContent":["// Environment and localStorage management utility\r\n\r\nexport const ENV_KEY = 'app_environment';\r\nexport const TOKEN_KEY = 'accessToken';\r\nexport const BUILD_TIMESTAMP_KEY = 'build_timestamp';\r\n\r\n// Get current environment\r\nexport const getCurrentEnv = () => {\r\n  return process.env.NODE_ENV || 'development';\r\n};\r\n\r\n// Get build timestamp (different for each build)\r\nexport const getBuildTimestamp = () => {\r\n  // Use build time or app version to detect new builds\r\n  return process.env.REACT_APP_BUILD_TIME || Date.now().toString();\r\n};\r\n\r\n// Check if this is a fresh build/deployment\r\nexport const isFreshBuild = () => {\r\n  const currentTimestamp = getBuildTimestamp();\r\n  const storedTimestamp = localStorage.getItem(BUILD_TIMESTAMP_KEY);\r\n  \r\n  console.log('🔍 Build check:', { current: currentTimestamp, stored: storedTimestamp });\r\n  \r\n  return !storedTimestamp || storedTimestamp !== currentTimestamp;\r\n};\r\n\r\n// Check if environment changed since last run\r\nexport const hasEnvironmentChanged = () => {\r\n  const currentEnv = getCurrentEnv();\r\n  const storedEnv = localStorage.getItem(ENV_KEY);\r\n  \r\n  console.log('🔍 Environment check:', { current: currentEnv, stored: storedEnv });\r\n  \r\n  return storedEnv && storedEnv !== currentEnv;\r\n};\r\n\r\n// Force clear localStorage for production builds\r\nexport const forceProductionClear = () => {\r\n  const currentEnv = getCurrentEnv();\r\n  \r\n  if (currentEnv === 'production') {\r\n    console.log('🏭 Production environment detected, clearing authentication...');\r\n    \r\n    // Always clear auth data in production for security\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('refreshToken');\r\n    \r\n    // Clear any auth-related keys\r\n    const authKeys = ['token', 'auth', 'session', 'login', 'admin'];\r\n    Object.keys(localStorage).forEach(key => {\r\n      if (authKeys.some(authKey => key.toLowerCase().includes(authKey))) {\r\n        localStorage.removeItem(key);\r\n        console.log(`🗑️ [PRODUCTION] Removed: ${key}`);\r\n      }\r\n    });\r\n    \r\n    console.log('✅ Production authentication cleared');\r\n    return true;\r\n  }\r\n  \r\n  return false;\r\n};\r\n\r\n// Clear localStorage if environment changed\r\nexport const clearLocalStorageOnEnvChange = () => {\r\n  if (hasEnvironmentChanged()) {\r\n    console.log('🧹 Environment changed, clearing localStorage...');\r\n    \r\n    // Clear auth-related data\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('refreshToken');\r\n    \r\n    // Clear any other app-specific data that might be invalid\r\n    const keysToKeep = ['theme', 'language', 'preferences']; // Keep user preferences\r\n    const allKeys = Object.keys(localStorage);\r\n    \r\n    allKeys.forEach(key => {\r\n      if (!keysToKeep.includes(key) && key !== ENV_KEY) {\r\n        localStorage.removeItem(key);\r\n        console.log(`🗑️ Removed: ${key}`);\r\n      }\r\n    });\r\n    \r\n    console.log('✅ localStorage cleared for environment change');\r\n  }\r\n  \r\n  // Update stored environment\r\n  const currentEnv = getCurrentEnv();\r\n  localStorage.setItem(ENV_KEY, currentEnv);\r\n  console.log('📝 Environment stored:', currentEnv);\r\n};\r\n\r\n// Check if token exists and is valid format\r\nexport const isValidToken = (token) => {\r\n  if (!token || typeof token !== 'string') {\r\n    return false;\r\n  }\r\n  \r\n  // Basic token format validation\r\n  if (token.length < 10) {\r\n    return false;\r\n  }\r\n  \r\n  // Check if it looks like a JWT token\r\n  if (token.includes('.') && token.split('.').length === 3) {\r\n    return true;\r\n  }\r\n  \r\n  // Check if it's a basic token format\r\n  if (token.length > 20 && /^[A-Za-z0-9+/=.-]+$/.test(token)) {\r\n    return true;\r\n  }\r\n  \r\n  return false;\r\n};\r\n\r\n// Clear invalid tokens\r\nexport const clearInvalidTokens = () => {\r\n  const token = localStorage.getItem(TOKEN_KEY);\r\n  \r\n  if (token && !isValidToken(token)) {\r\n    console.log('🧹 Invalid token format detected, removing...');\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem('user');\r\n    return true;\r\n  }\r\n  \r\n  return false;\r\n};\r\n\r\n// Initialize localStorage management\r\nexport const initializeLocalStorage = () => {\r\n  console.log('🚀 Initializing localStorage management...');\r\n  \r\n  // 🔐 COMMENTED OUT: Auto-clear authentication (for testing)\r\n  // console.log('🧹 Clearing authentication for fresh start...');\r\n  // localStorage.removeItem(TOKEN_KEY);\r\n  // localStorage.removeItem('user');\r\n  // localStorage.removeItem('refreshToken');\r\n  \r\n  // Clear any other auth-related data\r\n  // const authKeys = ['token', 'auth', 'session', 'login', 'admin'];\r\n  // Object.keys(localStorage).forEach(key => {\r\n  //   if (authKeys.some(authKey => key.toLowerCase().includes(authKey))) {\r\n  //     localStorage.removeItem(key);\r\n  //   }\r\n  // });\r\n  \r\n  // Update build timestamp\r\n  const currentTimestamp = getBuildTimestamp();\r\n  localStorage.setItem(BUILD_TIMESTAMP_KEY, currentTimestamp);\r\n  \r\n  console.log('✅ LocalStorage management initialized - auth tokens preserved');\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}