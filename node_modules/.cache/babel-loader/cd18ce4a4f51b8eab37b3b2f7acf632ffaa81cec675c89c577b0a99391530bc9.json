{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Desktop\\\\fe\\\\fe-sport\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authService } from '../services'; // Giả sử authService có phương thức googleLogin\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  isLoading: true,\n  error: null\n};\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'AUTH_START':\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case 'AUTH_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      };\n    case 'AUTH_FAILURE':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: action.payload\n      };\n    case 'AUTH_LOGOUT':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n  useEffect(() => {\n    checkAuth();\n  }, []);\n  const checkAuth = async () => {\n    const token = localStorage.getItem('accessToken');\n    console.log('Checking auth with token:', token ? 'Token exists' : 'No token');\n    if (!token) {\n      console.log('No token found, setting loading to false');\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return;\n    }\n    try {\n      if (typeof token !== 'string' || token.length < 10) {\n        console.log('❌ Invalid token format, removing');\n        localStorage.removeItem('accessToken');\n        dispatch({\n          type: 'AUTH_FAILURE',\n          payload: 'Invalid token format'\n        });\n        return;\n      }\n      const response = await authService.getAccount();\n      console.log('Account response:', response);\n      let userData = null;\n      if (response && response.success && response.data) {\n        userData = response.data;\n        console.log('✅ Wrapped format detected, user data:', userData);\n      } else if (response && response.id && response.email) {\n        userData = response;\n        console.log('✅ Direct format detected, user data:', userData);\n      } else {\n        console.log('❌ Invalid response format:', response);\n        localStorage.removeItem('accessToken');\n        dispatch({\n          type: 'AUTH_FAILURE',\n          payload: 'Invalid token response'\n        });\n        return;\n      }\n      if (!userData.id || !userData.email) {\n        console.log('❌ Incomplete user data, removing token');\n        localStorage.removeItem('accessToken');\n        dispatch({\n          type: 'AUTH_FAILURE',\n          payload: 'Incomplete user data'\n        });\n        return;\n      }\n      console.log('✅ Auth check successful, user data:', userData);\n      dispatch({\n        type: 'AUTH_SUCCESS',\n        payload: {\n          user: userData\n        }\n      });\n    } catch (error) {\n      var _error$response, _error$response2, _error$message, _error$message2, _error$response3, _error$response3$data;\n      console.log('❌ Auth check failed:', error);\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403 || (_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('token') || (_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes('unauthorized')) {\n        console.log('Authentication error, removing token');\n        localStorage.removeItem('accessToken');\n      }\n      dispatch({\n        type: 'AUTH_FAILURE',\n        payload: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message\n      }); // Sử dụng error.response?.data?.message nếu có\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      }); // Đảm bảo isLoading được đặt về false\n    }\n  };\n  const login = async credentials => {\n    dispatch({\n      type: 'AUTH_START'\n    });\n    try {\n      const response = await authService.login(credentials);\n      console.log('=== LOGIN RESPONSE DEBUG ===');\n      console.log('Full response:', response);\n      let accessToken, user;\n      if (response !== null && response !== void 0 && response.data) {\n        // Check if response.data exists first\n        accessToken = response.data.accessToken || response.data.access_token;\n        user = response.data.user;\n      } else {\n        accessToken = response.accessToken || response.access_token; // Direct access if no data wrapper\n        user = response.user;\n      }\n      if (!accessToken) {\n        console.error('❌ No access token found in response');\n        console.error('Response structure:', JSON.stringify(response, null, 2));\n        throw new Error('No access token received');\n      }\n      if (!user) {\n        console.error('No user data found in response');\n        throw new Error('No user data received');\n      }\n      console.log('✅ Storing token and user data...');\n      localStorage.setItem('accessToken', accessToken);\n      dispatch({\n        type: 'AUTH_SUCCESS',\n        payload: {\n          user\n        }\n      });\n      console.log('✅ Login successful, user authenticated');\n      return response;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('❌ Login error:', error);\n      console.error('❌ Error response:', error.response);\n      dispatch({\n        type: 'AUTH_FAILURE',\n        payload: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || error.message\n      });\n      throw error;\n    }\n  };\n\n  // === THÊM HÀM loginWithGoogle NÀY VÀO ===\n  const loginWithGoogle = async accessTokenFromGoogle => {\n    dispatch({\n      type: 'AUTH_START'\n    });\n    try {\n      // Gọi service để gửi access token của Google đến backend của bạn\n      // Giả định authService.googleLogin có endpoint để xử lý\n      const response = await authService.googleLogin(accessTokenFromGoogle); // <-- Cần tạo hàm này trong authService.js\n\n      console.log('=== GOOGLE LOGIN RESPONSE DEBUG ===');\n      console.log('Full response:', response);\n      let accessToken, user;\n      if (response !== null && response !== void 0 && response.data) {\n        accessToken = response.data.accessToken || response.data.access_token;\n        user = response.data.user;\n      } else {\n        accessToken = response.accessToken || response.access_token;\n        user = response.user;\n      }\n      if (!accessToken) {\n        console.error('❌ No access token (from your backend) found in Google login response');\n        throw new Error('No access token received from backend after Google login');\n      }\n      if (!user) {\n        console.error('No user data found in Google login response');\n        throw new Error('No user data received from backend after Google login');\n      }\n      localStorage.setItem('accessToken', accessToken);\n      dispatch({\n        type: 'AUTH_SUCCESS',\n        payload: {\n          user\n        }\n      });\n      console.log('✅ Google login successful, user authenticated');\n      return response;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('❌ Google login error:', error);\n      dispatch({\n        type: 'AUTH_FAILURE',\n        payload: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || error.message\n      });\n      throw error;\n    }\n  };\n  // === KẾT THÚC HÀM loginWithGoogle ===\n\n  const register = async userData => {\n    dispatch({\n      type: 'AUTH_START'\n    });\n    try {\n      const response = await authService.register(userData);\n      console.log('✅ Registration successful:', response);\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return response;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error('❌ Registration failed:', error);\n      dispatch({\n        type: 'AUTH_FAILURE',\n        payload: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || error.message\n      });\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('user');\n      localStorage.removeItem('refreshToken');\n      const authKeys = ['token', 'auth', 'session', 'login'];\n      Object.keys(localStorage).forEach(key => {\n        if (authKeys.some(authKey => key.toLowerCase().includes(authKey))) {\n          localStorage.removeItem(key);\n        }\n      });\n      console.log('✅ Complete logout and localStorage cleanup');\n      dispatch({\n        type: 'AUTH_LOGOUT'\n      });\n    }\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    checkAuth,\n    loginWithGoogle // === ĐẢM BẢO THÊM NÓ VÀO ĐÂY ===\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","initialState","user","isAuthenticated","isLoading","error","authReducer","state","action","type","payload","AuthProvider","children","_s","dispatch","checkAuth","token","localStorage","getItem","console","log","length","removeItem","response","getAccount","userData","success","data","id","email","_error$response","_error$response2","_error$message","_error$message2","_error$response3","_error$response3$data","status","message","includes","login","credentials","accessToken","access_token","JSON","stringify","Error","setItem","_error$response4","_error$response4$data","loginWithGoogle","accessTokenFromGoogle","googleLogin","_error$response5","_error$response5$data","register","_error$response6","_error$response6$data","logout","authKeys","Object","keys","forEach","key","some","authKey","toLowerCase","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/ACER/Desktop/fe/fe-sport/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { authService } from '../services'; // Giả sử authService có phương thức googleLogin\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst initialState = {\r\n  user: null,\r\n  isAuthenticated: false,\r\n  isLoading: true,\r\n  error: null,\r\n};\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'AUTH_START':\r\n      return { ...state, isLoading: true, error: null };\r\n    case 'AUTH_SUCCESS':\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        isAuthenticated: true,\r\n        isLoading: false,\r\n        error: null,\r\n      };\r\n    case 'AUTH_FAILURE':\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        isAuthenticated: false,\r\n        isLoading: false,\r\n        error: action.payload,\r\n      };\r\n    case 'AUTH_LOGOUT':\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        isAuthenticated: false,\r\n        isLoading: false,\r\n        error: null,\r\n      };\r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  useEffect(() => {\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const checkAuth = async () => {\r\n    const token = localStorage.getItem('accessToken');\r\n    console.log('Checking auth with token:', token ? 'Token exists' : 'No token');\r\n    \r\n    if (!token) {\r\n      console.log('No token found, setting loading to false');\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (typeof token !== 'string' || token.length < 10) {\r\n        console.log('❌ Invalid token format, removing');\r\n        localStorage.removeItem('accessToken');\r\n        dispatch({ type: 'AUTH_FAILURE', payload: 'Invalid token format' });\r\n        return;\r\n      }\r\n\r\n      const response = await authService.getAccount();\r\n      console.log('Account response:', response);\r\n      \r\n      let userData = null;\r\n      \r\n      if (response && response.success && response.data) {\r\n        userData = response.data;\r\n        console.log('✅ Wrapped format detected, user data:', userData);\r\n      } else if (response && response.id && response.email) {\r\n        userData = response;\r\n        console.log('✅ Direct format detected, user data:', userData);\r\n      } else {\r\n        console.log('❌ Invalid response format:', response);\r\n        localStorage.removeItem('accessToken');\r\n        dispatch({ type: 'AUTH_FAILURE', payload: 'Invalid token response' });\r\n        return;\r\n      }\r\n      \r\n      if (!userData.id || !userData.email) {\r\n        console.log('❌ Incomplete user data, removing token');\r\n        localStorage.removeItem('accessToken');\r\n        dispatch({ type: 'AUTH_FAILURE', payload: 'Incomplete user data' });\r\n        return;\r\n      }\r\n      \r\n      console.log('✅ Auth check successful, user data:', userData);\r\n      dispatch({\r\n        type: 'AUTH_SUCCESS',\r\n        payload: { user: userData },\r\n      });\r\n    } catch (error) {\r\n      console.log('❌ Auth check failed:', error);\r\n      \r\n      if (error.response?.status === 401 || \r\n          error.response?.status === 403 ||\r\n          error.message?.includes('token') ||\r\n          error.message?.includes('unauthorized')) {\r\n        console.log('Authentication error, removing token');\r\n        localStorage.removeItem('accessToken');\r\n      }\r\n      \r\n      dispatch({ type: 'AUTH_FAILURE', payload: error.response?.data?.message || error.message }); // Sử dụng error.response?.data?.message nếu có\r\n    } finally {\r\n        dispatch({ type: 'SET_LOADING', payload: false }); // Đảm bảo isLoading được đặt về false\r\n    }\r\n  };\r\n\r\n  const login = async (credentials) => {\r\n    dispatch({ type: 'AUTH_START' });\r\n    try {\r\n      const response = await authService.login(credentials);\r\n      console.log('=== LOGIN RESPONSE DEBUG ===');\r\n      console.log('Full response:', response);\r\n      \r\n      let accessToken, user;\r\n      \r\n      if (response?.data) { // Check if response.data exists first\r\n        accessToken = response.data.accessToken || response.data.access_token;\r\n        user = response.data.user;\r\n      } else {\r\n          accessToken = response.accessToken || response.access_token; // Direct access if no data wrapper\r\n          user = response.user;\r\n      }\r\n      \r\n      if (!accessToken) {\r\n        console.error('❌ No access token found in response');\r\n        console.error('Response structure:', JSON.stringify(response, null, 2));\r\n        throw new Error('No access token received');\r\n      }\r\n      \r\n      if (!user) {\r\n        console.error('No user data found in response');\r\n        throw new Error('No user data received');\r\n      }\r\n      \r\n      console.log('✅ Storing token and user data...');\r\n      localStorage.setItem('accessToken', accessToken);\r\n      \r\n      dispatch({\r\n        type: 'AUTH_SUCCESS',\r\n        payload: { user },\r\n      });\r\n      \r\n      console.log('✅ Login successful, user authenticated');\r\n      return response;\r\n    } catch (error) {\r\n      console.error('❌ Login error:', error);\r\n      console.error('❌ Error response:', error.response);\r\n      dispatch({ type: 'AUTH_FAILURE', payload: error.response?.data?.message || error.message });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // === THÊM HÀM loginWithGoogle NÀY VÀO ===\r\n  const loginWithGoogle = async (accessTokenFromGoogle) => {\r\n    dispatch({ type: 'AUTH_START' });\r\n    try {\r\n      // Gọi service để gửi access token của Google đến backend của bạn\r\n      // Giả định authService.googleLogin có endpoint để xử lý\r\n      const response = await authService.googleLogin(accessTokenFromGoogle); // <-- Cần tạo hàm này trong authService.js\r\n      \r\n      console.log('=== GOOGLE LOGIN RESPONSE DEBUG ===');\r\n      console.log('Full response:', response);\r\n\r\n      let accessToken, user;\r\n\r\n      if (response?.data) {\r\n        accessToken = response.data.accessToken || response.data.access_token;\r\n        user = response.data.user;\r\n      } else {\r\n        accessToken = response.accessToken || response.access_token;\r\n        user = response.user;\r\n      }\r\n      \r\n      if (!accessToken) {\r\n        console.error('❌ No access token (from your backend) found in Google login response');\r\n        throw new Error('No access token received from backend after Google login');\r\n      }\r\n      \r\n      if (!user) {\r\n        console.error('No user data found in Google login response');\r\n        throw new Error('No user data received from backend after Google login');\r\n      }\r\n\r\n      localStorage.setItem('accessToken', accessToken);\r\n      \r\n      dispatch({\r\n        type: 'AUTH_SUCCESS',\r\n        payload: { user },\r\n      });\r\n      \r\n      console.log('✅ Google login successful, user authenticated');\r\n      return response;\r\n\r\n    } catch (error) {\r\n      console.error('❌ Google login error:', error);\r\n      dispatch({ type: 'AUTH_FAILURE', payload: error.response?.data?.message || error.message });\r\n      throw error;\r\n    }\r\n  };\r\n  // === KẾT THÚC HÀM loginWithGoogle ===\r\n\r\n\r\n  const register = async (userData) => {\r\n    dispatch({ type: 'AUTH_START' });\r\n    try {\r\n      const response = await authService.register(userData);\r\n      console.log('✅ Registration successful:', response);\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('❌ Registration failed:', error);\r\n      dispatch({ type: 'AUTH_FAILURE', payload: error.response?.data?.message || error.message });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await authService.logout();\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      localStorage.removeItem('accessToken');\r\n      localStorage.removeItem('user');\r\n      localStorage.removeItem('refreshToken');\r\n      \r\n      const authKeys = ['token', 'auth', 'session', 'login'];\r\n      Object.keys(localStorage).forEach(key => {\r\n        if (authKeys.some(authKey => key.toLowerCase().includes(authKey))) {\r\n          localStorage.removeItem(key);\r\n        }\r\n      });\r\n      \r\n      console.log('✅ Complete logout and localStorage cleanup');\r\n      dispatch({ type: 'AUTH_LOGOUT' });\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    login,\r\n    register,\r\n    logout,\r\n    checkAuth,\r\n    loginWithGoogle, // === ĐẢM BẢO THÊM NÓ VÀO ĐÂY ===\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}