{"ast":null,"code":"import apiClient from './apiClient';\nimport { createFileUploadConfig } from './apiClient';\nconst API_BASE_PATH = '/api/v1/news';\nconst newsService = {\n  // Get all news articles\n  getAllNews: async () => {\n    try {\n      console.log('🔗 [NewsService] Calling API:', API_BASE_PATH);\n      console.log('🔗 [NewsService] Full URL:', `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}`);\n      const response = await apiClient.get(API_BASE_PATH);\n      console.log('✅ [NewsService] Raw API Response:', response);\n      console.log('✅ [NewsService] Response type:', typeof response);\n\n      // Handle different response structures\n      let newsList;\n      if (Array.isArray(response)) {\n        newsList = response;\n      } else if (response !== null && response !== void 0 && response.data && Array.isArray(response.data)) {\n        newsList = response.data;\n      } else if (response !== null && response !== void 0 && response.content && Array.isArray(response.content)) {\n        newsList = response.content;\n      } else if (response !== null && response !== void 0 && response.items && Array.isArray(response.items)) {\n        newsList = response.items;\n      } else {\n        console.warn('⚠️ [NewsService] Unexpected response structure:', response);\n        newsList = [];\n      }\n      console.log('✅ [NewsService] Processed newsList:', newsList);\n      console.log('✅ [NewsService] newsList length:', newsList.length);\n      return newsList;\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('❌ [NewsService] API Error:', error);\n      console.error('❌ [NewsService] Error status:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status);\n      console.error('❌ [NewsService] Error data:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      throw error;\n    }\n  },\n  // Get news by ID\n  getNewsById: async id => {\n    try {\n      const newsArticle = await apiClient.get(`${API_BASE_PATH}/${id}`);\n      return newsArticle;\n    } catch (error) {\n      console.error(`Error fetching news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  createNews: async newsData => {\n    try {\n      console.log('🔗 [NewsService] Creating news:', newsData);\n      const response = await apiClient.post(API_BASE_PATH, newsData);\n      console.log('✅ [NewsService] Create response:', response);\n\n      // Handle different response structures\n      const result = (response === null || response === void 0 ? void 0 : response.data) || response;\n      console.log('✅ [NewsService] Processed create result:', result);\n      return result;\n    } catch (error) {\n      console.error('❌ [NewsService] Create error:', error);\n      throw error;\n    }\n  },\n  // Update a news article\n  updateNews: async (id, newsData) => {\n    try {\n      const response = await apiClient.put(`${API_BASE_PATH}/${id}`, newsData);\n      return response;\n    } catch (error) {\n      console.error(`Error updating news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  // Delete a news article\n  deleteNews: async id => {\n    try {\n      const response = await apiClient.delete(`${API_BASE_PATH}/${id}`);\n      return response;\n    } catch (error) {\n      console.error(`Error deleting news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  uploadNewsAttachments: async (newsId, file, onUploadProgress) => {\n    try {\n      const formData = new FormData();\n      formData.append('files', file);\n      const config = createFileUploadConfig(onUploadProgress);\n      const response = await apiClient.post(`${API_BASE_PATH}/uploads/${newsId}`, formData, config);\n      return response;\n    } catch (error) {\n      console.error(`Error uploading attachment for news ID ${newsId}:`, error);\n      throw error;\n    }\n  },\n  getImageUrl: imageName => {\n    return `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}/image/${imageName}`;\n  }\n};\nexport default newsService;","map":{"version":3,"names":["apiClient","createFileUploadConfig","API_BASE_PATH","newsService","getAllNews","console","log","process","env","REACT_APP_API_URL","response","get","newsList","Array","isArray","data","content","items","warn","length","error","_error$response","_error$response2","status","getNewsById","id","newsArticle","createNews","newsData","post","result","updateNews","put","deleteNews","delete","uploadNewsAttachments","newsId","file","onUploadProgress","formData","FormData","append","config","getImageUrl","imageName"],"sources":["C:/Users/ACER/Desktop/fe/fe-edu/src/services/newsService.js"],"sourcesContent":["import apiClient from './apiClient'; \nimport { createFileUploadConfig } from './apiClient'; \n\nconst API_BASE_PATH = '/api/v1/news';\n\nconst newsService = {\n  // Get all news articles\n  getAllNews: async () => {\n    try {\n      console.log('🔗 [NewsService] Calling API:', API_BASE_PATH);\n      console.log('🔗 [NewsService] Full URL:', `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}`);\n      \n      const response = await apiClient.get(API_BASE_PATH);\n      console.log('✅ [NewsService] Raw API Response:', response);\n      console.log('✅ [NewsService] Response type:', typeof response);\n      \n      // Handle different response structures\n      let newsList;\n      if (Array.isArray(response)) {\n        newsList = response;\n      } else if (response?.data && Array.isArray(response.data)) {\n        newsList = response.data;\n      } else if (response?.content && Array.isArray(response.content)) {\n        newsList = response.content;\n      } else if (response?.items && Array.isArray(response.items)) {\n        newsList = response.items;\n      } else {\n        console.warn('⚠️ [NewsService] Unexpected response structure:', response);\n        newsList = [];\n      }\n      \n      console.log('✅ [NewsService] Processed newsList:', newsList);\n      console.log('✅ [NewsService] newsList length:', newsList.length);\n      \n      return newsList;\n    } catch (error) {\n      console.error('❌ [NewsService] API Error:', error);\n      console.error('❌ [NewsService] Error status:', error.response?.status);\n      console.error('❌ [NewsService] Error data:', error.response?.data);\n      throw error; \n    }\n  },\n\n  // Get news by ID\n  getNewsById: async (id) => {\n    try {\n      const newsArticle = await apiClient.get(`${API_BASE_PATH}/${id}`);\n      return newsArticle;\n    } catch (error) {\n      console.error(`Error fetching news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  createNews: async (newsData) => {\n    try {\n      console.log('🔗 [NewsService] Creating news:', newsData);\n      const response = await apiClient.post(API_BASE_PATH, newsData);\n      console.log('✅ [NewsService] Create response:', response);\n      \n      // Handle different response structures\n      const result = response?.data || response;\n      console.log('✅ [NewsService] Processed create result:', result);\n      \n      return result;\n    } catch (error) {\n      console.error('❌ [NewsService] Create error:', error);\n      throw error;\n    }\n  },\n\n  // Update a news article\n  updateNews: async (id, newsData) => {\n    try {\n      const response = await apiClient.put(`${API_BASE_PATH}/${id}`, newsData);\n      return response;\n    } catch (error) {\n      console.error(`Error updating news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  // Delete a news article\n  deleteNews: async (id) => {\n    try {\n      const response = await apiClient.delete(`${API_BASE_PATH}/${id}`);\n      return response;\n    } catch (error) {\n      console.error(`Error deleting news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  uploadNewsAttachments: async (newsId, file, onUploadProgress) => {\n    try {\n      const formData = new FormData();\n      formData.append('files', file); \n\n      const config = createFileUploadConfig(onUploadProgress);\n      const response = await apiClient.post(`${API_BASE_PATH}/uploads/${newsId}`, formData, config);\n      return response;\n    } catch (error) {\n      console.error(`Error uploading attachment for news ID ${newsId}:`, error);\n      throw error;\n    }\n  },\n\n  getImageUrl: (imageName) => {\n    return `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}/image/${imageName}`;\n  }\n};\n\nexport default newsService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}