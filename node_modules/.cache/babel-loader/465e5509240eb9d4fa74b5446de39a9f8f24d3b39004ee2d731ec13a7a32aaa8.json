{"ast":null,"code":"import apiClient from './apiClient';\nimport { createFileUploadConfig } from './apiClient';\nconst API_BASE_PATH = '/api/v1/news';\nconst newsService = {\n  // Get all news articles\n  getAllNews: async () => {\n    console.log('🚀 [NewsService] getAllNews FUNCTION START');\n    try {\n      var _newsList;\n      console.log('🔗 [NewsService] Calling API:', API_BASE_PATH);\n      console.log('🔗 [NewsService] Full URL:', `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}`);\n      console.log('📞 [NewsService] About to call apiClient.get...');\n      const response = await apiClient.get(API_BASE_PATH);\n      console.log('📞 [NewsService] apiClient.get completed!');\n      console.log('✅ [NewsService] Raw API Response:', response);\n      console.log('✅ [NewsService] Response type:', typeof response);\n      console.log('✅ [NewsService] Response is array:', Array.isArray(response));\n      console.log('✅ [NewsService] Response === null:', response === null);\n      console.log('✅ [NewsService] Response === undefined:', response === undefined);\n\n      // Try to access response directly\n      if (response) {\n        console.log('🔍 [NewsService] Response is truthy');\n        console.log('🔍 [NewsService] Response constructor:', response.constructor.name);\n        if (typeof response === 'object') {\n          console.log('🔍 [NewsService] Response keys:', Object.keys(response));\n\n          // Check each key\n          Object.keys(response).forEach(key => {\n            const value = response[key];\n            console.log(`🔍 [NewsService] response[${key}]:`, value);\n            console.log(`🔍 [NewsService] response[${key}] type:`, typeof value);\n            console.log(`🔍 [NewsService] response[${key}] isArray:`, Array.isArray(value));\n          });\n        }\n      } else {\n        console.error('❌ [NewsService] Response is falsy!');\n      }\n\n      // Handle different response structures\n      let newsList;\n      if (Array.isArray(response)) {\n        console.log('✅ [NewsService] Using direct array response');\n        newsList = response;\n      } else if (response !== null && response !== void 0 && response.data && Array.isArray(response.data)) {\n        console.log('✅ [NewsService] Using response.data array');\n        newsList = response.data;\n      } else if (response !== null && response !== void 0 && response.content && Array.isArray(response.content)) {\n        console.log('✅ [NewsService] Using response.content array');\n        newsList = response.content;\n      } else if (response !== null && response !== void 0 && response.items && Array.isArray(response.items)) {\n        console.log('✅ [NewsService] Using response.items array');\n        newsList = response.items;\n      } else {\n        console.warn('⚠️ [NewsService] Unexpected response structure:', response);\n        newsList = [];\n      }\n      console.log('✅ [NewsService] Final processed newsList:', newsList);\n      console.log('✅ [NewsService] newsList length:', ((_newsList = newsList) === null || _newsList === void 0 ? void 0 : _newsList.length) || 0);\n\n      // Ensure we always return an array\n      const result = Array.isArray(newsList) ? newsList : [];\n      console.log('✅ [NewsService] About to return result:', result);\n      console.log('✅ [NewsService] Result type:', typeof result);\n      console.log('✅ [NewsService] Result isArray:', Array.isArray(result));\n      console.log('🏁 [NewsService] getAllNews FUNCTION END - RETURNING:', result);\n      return result;\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('❌ [NewsService] API Error in getAllNews:', error);\n      console.error('❌ [NewsService] Error status:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status);\n      console.error('❌ [NewsService] Error data:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      console.error('❌ [NewsService] Error stack:', error.stack);\n      throw error;\n    }\n  },\n  // Get news by ID\n  getNewsById: async id => {\n    try {\n      const newsArticle = await apiClient.get(`${API_BASE_PATH}/${id}`);\n      return newsArticle;\n    } catch (error) {\n      console.error(`Error fetching news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  createNews: async newsData => {\n    try {\n      console.log('🔗 [NewsService] Creating news:', newsData);\n      const response = await apiClient.post(API_BASE_PATH, newsData);\n      console.log('✅ [NewsService] Create response:', response);\n\n      // Handle different response structures\n      const result = (response === null || response === void 0 ? void 0 : response.data) || response;\n      console.log('✅ [NewsService] Processed create result:', result);\n      return result;\n    } catch (error) {\n      console.error('❌ [NewsService] Create error:', error);\n      throw error;\n    }\n  },\n  // Update a news article\n  updateNews: async (id, newsData) => {\n    try {\n      const response = await apiClient.put(`${API_BASE_PATH}/${id}`, newsData);\n      return response;\n    } catch (error) {\n      console.error(`Error updating news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  // Delete a news article\n  deleteNews: async id => {\n    try {\n      const response = await apiClient.delete(`${API_BASE_PATH}/${id}`);\n      return response;\n    } catch (error) {\n      console.error(`Error deleting news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  uploadNewsAttachments: async (newsId, file, onUploadProgress) => {\n    try {\n      const formData = new FormData();\n      formData.append('files', file);\n      const config = createFileUploadConfig(onUploadProgress);\n      const response = await apiClient.post(`${API_BASE_PATH}/uploads/${newsId}`, formData, config);\n      return response;\n    } catch (error) {\n      console.error(`Error uploading attachment for news ID ${newsId}:`, error);\n      throw error;\n    }\n  },\n  getImageUrl: imageName => {\n    return `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}/image/${imageName}`;\n  }\n};\nexport default newsService;","map":{"version":3,"names":["apiClient","createFileUploadConfig","API_BASE_PATH","newsService","getAllNews","console","log","_newsList","process","env","REACT_APP_API_URL","response","get","Array","isArray","undefined","constructor","name","Object","keys","forEach","key","value","error","newsList","data","content","items","warn","length","result","_error$response","_error$response2","status","stack","getNewsById","id","newsArticle","createNews","newsData","post","updateNews","put","deleteNews","delete","uploadNewsAttachments","newsId","file","onUploadProgress","formData","FormData","append","config","getImageUrl","imageName"],"sources":["C:/Users/ACER/Desktop/fe/fe-edu/src/services/newsService.js"],"sourcesContent":["import apiClient from './apiClient'; \nimport { createFileUploadConfig } from './apiClient'; \n\nconst API_BASE_PATH = '/api/v1/news';\n\nconst newsService = {\n  // Get all news articles\n  getAllNews: async () => {\n    console.log('🚀 [NewsService] getAllNews FUNCTION START');\n    try {\n      console.log('🔗 [NewsService] Calling API:', API_BASE_PATH);\n      console.log('🔗 [NewsService] Full URL:', `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}`);\n      \n      console.log('📞 [NewsService] About to call apiClient.get...');\n      const response = await apiClient.get(API_BASE_PATH);\n      console.log('📞 [NewsService] apiClient.get completed!');\n      \n      console.log('✅ [NewsService] Raw API Response:', response);\n      console.log('✅ [NewsService] Response type:', typeof response);\n      console.log('✅ [NewsService] Response is array:', Array.isArray(response));\n      console.log('✅ [NewsService] Response === null:', response === null);\n      console.log('✅ [NewsService] Response === undefined:', response === undefined);\n      \n      // Try to access response directly\n      if (response) {\n        console.log('🔍 [NewsService] Response is truthy');\n        console.log('🔍 [NewsService] Response constructor:', response.constructor.name);\n        \n        if (typeof response === 'object') {\n          console.log('🔍 [NewsService] Response keys:', Object.keys(response));\n          \n          // Check each key\n          Object.keys(response).forEach(key => {\n            const value = response[key];\n            console.log(`🔍 [NewsService] response[${key}]:`, value);\n            console.log(`🔍 [NewsService] response[${key}] type:`, typeof value);\n            console.log(`🔍 [NewsService] response[${key}] isArray:`, Array.isArray(value));\n          });\n        }\n      } else {\n        console.error('❌ [NewsService] Response is falsy!');\n      }\n      \n      // Handle different response structures\n      let newsList;\n      if (Array.isArray(response)) {\n        console.log('✅ [NewsService] Using direct array response');\n        newsList = response;\n      } else if (response?.data && Array.isArray(response.data)) {\n        console.log('✅ [NewsService] Using response.data array');\n        newsList = response.data;\n      } else if (response?.content && Array.isArray(response.content)) {\n        console.log('✅ [NewsService] Using response.content array');\n        newsList = response.content;\n      } else if (response?.items && Array.isArray(response.items)) {\n        console.log('✅ [NewsService] Using response.items array');\n        newsList = response.items;\n      } else {\n        console.warn('⚠️ [NewsService] Unexpected response structure:', response);\n        newsList = [];\n      }\n      \n      console.log('✅ [NewsService] Final processed newsList:', newsList);\n      console.log('✅ [NewsService] newsList length:', newsList?.length || 0);\n      \n      // Ensure we always return an array\n      const result = Array.isArray(newsList) ? newsList : [];\n      console.log('✅ [NewsService] About to return result:', result);\n      console.log('✅ [NewsService] Result type:', typeof result);\n      console.log('✅ [NewsService] Result isArray:', Array.isArray(result));\n      \n      console.log('🏁 [NewsService] getAllNews FUNCTION END - RETURNING:', result);\n      return result;\n    } catch (error) {\n      console.error('❌ [NewsService] API Error in getAllNews:', error);\n      console.error('❌ [NewsService] Error status:', error.response?.status);\n      console.error('❌ [NewsService] Error data:', error.response?.data);\n      console.error('❌ [NewsService] Error stack:', error.stack);\n      throw error; \n    }\n  },\n\n  // Get news by ID\n  getNewsById: async (id) => {\n    try {\n      const newsArticle = await apiClient.get(`${API_BASE_PATH}/${id}`);\n      return newsArticle;\n    } catch (error) {\n      console.error(`Error fetching news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  createNews: async (newsData) => {\n    try {\n      console.log('🔗 [NewsService] Creating news:', newsData);\n      const response = await apiClient.post(API_BASE_PATH, newsData);\n      console.log('✅ [NewsService] Create response:', response);\n      \n      // Handle different response structures\n      const result = response?.data || response;\n      console.log('✅ [NewsService] Processed create result:', result);\n      \n      return result;\n    } catch (error) {\n      console.error('❌ [NewsService] Create error:', error);\n      throw error;\n    }\n  },\n\n  // Update a news article\n  updateNews: async (id, newsData) => {\n    try {\n      const response = await apiClient.put(`${API_BASE_PATH}/${id}`, newsData);\n      return response;\n    } catch (error) {\n      console.error(`Error updating news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  // Delete a news article\n  deleteNews: async (id) => {\n    try {\n      const response = await apiClient.delete(`${API_BASE_PATH}/${id}`);\n      return response;\n    } catch (error) {\n      console.error(`Error deleting news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  uploadNewsAttachments: async (newsId, file, onUploadProgress) => {\n    try {\n      const formData = new FormData();\n      formData.append('files', file); \n\n      const config = createFileUploadConfig(onUploadProgress);\n      const response = await apiClient.post(`${API_BASE_PATH}/uploads/${newsId}`, formData, config);\n      return response;\n    } catch (error) {\n      console.error(`Error uploading attachment for news ID ${newsId}:`, error);\n      throw error;\n    }\n  },\n\n  getImageUrl: (imageName) => {\n    return `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}/image/${imageName}`;\n  }\n};\n\nexport default newsService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}