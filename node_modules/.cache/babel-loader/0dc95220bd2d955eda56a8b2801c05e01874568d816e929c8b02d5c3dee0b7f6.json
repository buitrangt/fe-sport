{"ast":null,"code":"// Environment and localStorage management utility\n\nexport const ENV_KEY = 'app_environment';\nexport const TOKEN_KEY = 'accessToken';\n\n// Get current environment\nexport const getCurrentEnv = () => {\n  return process.env.NODE_ENV || 'development';\n};\n\n// Check if environment changed since last run\nexport const hasEnvironmentChanged = () => {\n  const currentEnv = getCurrentEnv();\n  const storedEnv = localStorage.getItem(ENV_KEY);\n  console.log('üîç Environment check:', {\n    current: currentEnv,\n    stored: storedEnv\n  });\n  return storedEnv && storedEnv !== currentEnv;\n};\n\n// Clear localStorage if environment changed\nexport const clearLocalStorageOnEnvChange = () => {\n  if (hasEnvironmentChanged()) {\n    console.log('üßπ Environment changed, clearing localStorage...');\n\n    // Clear auth-related data\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem('user');\n    localStorage.removeItem('refreshToken');\n\n    // Clear any other app-specific data that might be invalid\n    const keysToKeep = ['theme', 'language', 'preferences']; // Keep user preferences\n    const allKeys = Object.keys(localStorage);\n    allKeys.forEach(key => {\n      if (!keysToKeep.includes(key) && key !== ENV_KEY) {\n        localStorage.removeItem(key);\n        console.log(`üóëÔ∏è Removed: ${key}`);\n      }\n    });\n    console.log('‚úÖ localStorage cleared for environment change');\n  }\n\n  // Update stored environment\n  const currentEnv = getCurrentEnv();\n  localStorage.setItem(ENV_KEY, currentEnv);\n  console.log('üìù Environment stored:', currentEnv);\n};\n\n// Check if token exists and is valid format\nexport const isValidToken = token => {\n  if (!token || typeof token !== 'string') {\n    return false;\n  }\n\n  // Basic token format validation\n  if (token.length < 10) {\n    return false;\n  }\n\n  // Check if it looks like a JWT token\n  if (token.includes('.') && token.split('.').length === 3) {\n    return true;\n  }\n\n  // Check if it's a basic token format\n  if (token.length > 20 && /^[A-Za-z0-9+/=.-]+$/.test(token)) {\n    return true;\n  }\n  return false;\n};\n\n// Clear invalid tokens\nexport const clearInvalidTokens = () => {\n  const token = localStorage.getItem(TOKEN_KEY);\n  if (token && !isValidToken(token)) {\n    console.log('üßπ Invalid token format detected, removing...');\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem('user');\n    return true;\n  }\n  return false;\n};\n\n// Initialize localStorage management\nexport const initializeLocalStorage = () => {\n  console.log('üöÄ Initializing localStorage management...');\n\n  // Clear localStorage if environment changed\n  clearLocalStorageOnEnvChange();\n\n  // Clear invalid tokens\n  const hadInvalidToken = clearInvalidTokens();\n  if (hadInvalidToken) {\n    console.log('‚ö†Ô∏è Invalid authentication data was cleared');\n  }\n  console.log('‚úÖ localStorage management initialized');\n};","map":{"version":3,"names":["ENV_KEY","TOKEN_KEY","getCurrentEnv","process","env","NODE_ENV","hasEnvironmentChanged","currentEnv","storedEnv","localStorage","getItem","console","log","current","stored","clearLocalStorageOnEnvChange","removeItem","keysToKeep","allKeys","Object","keys","forEach","key","includes","setItem","isValidToken","token","length","split","test","clearInvalidTokens","initializeLocalStorage","hadInvalidToken"],"sources":["C:/Users/ACER/Desktop/fe/fe-edu/src/utils/localStorageManager.js"],"sourcesContent":["// Environment and localStorage management utility\n\nexport const ENV_KEY = 'app_environment';\nexport const TOKEN_KEY = 'accessToken';\n\n// Get current environment\nexport const getCurrentEnv = () => {\n  return process.env.NODE_ENV || 'development';\n};\n\n// Check if environment changed since last run\nexport const hasEnvironmentChanged = () => {\n  const currentEnv = getCurrentEnv();\n  const storedEnv = localStorage.getItem(ENV_KEY);\n  \n  console.log('üîç Environment check:', { current: currentEnv, stored: storedEnv });\n  \n  return storedEnv && storedEnv !== currentEnv;\n};\n\n// Clear localStorage if environment changed\nexport const clearLocalStorageOnEnvChange = () => {\n  if (hasEnvironmentChanged()) {\n    console.log('üßπ Environment changed, clearing localStorage...');\n    \n    // Clear auth-related data\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem('user');\n    localStorage.removeItem('refreshToken');\n    \n    // Clear any other app-specific data that might be invalid\n    const keysToKeep = ['theme', 'language', 'preferences']; // Keep user preferences\n    const allKeys = Object.keys(localStorage);\n    \n    allKeys.forEach(key => {\n      if (!keysToKeep.includes(key) && key !== ENV_KEY) {\n        localStorage.removeItem(key);\n        console.log(`üóëÔ∏è Removed: ${key}`);\n      }\n    });\n    \n    console.log('‚úÖ localStorage cleared for environment change');\n  }\n  \n  // Update stored environment\n  const currentEnv = getCurrentEnv();\n  localStorage.setItem(ENV_KEY, currentEnv);\n  console.log('üìù Environment stored:', currentEnv);\n};\n\n// Check if token exists and is valid format\nexport const isValidToken = (token) => {\n  if (!token || typeof token !== 'string') {\n    return false;\n  }\n  \n  // Basic token format validation\n  if (token.length < 10) {\n    return false;\n  }\n  \n  // Check if it looks like a JWT token\n  if (token.includes('.') && token.split('.').length === 3) {\n    return true;\n  }\n  \n  // Check if it's a basic token format\n  if (token.length > 20 && /^[A-Za-z0-9+/=.-]+$/.test(token)) {\n    return true;\n  }\n  \n  return false;\n};\n\n// Clear invalid tokens\nexport const clearInvalidTokens = () => {\n  const token = localStorage.getItem(TOKEN_KEY);\n  \n  if (token && !isValidToken(token)) {\n    console.log('üßπ Invalid token format detected, removing...');\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem('user');\n    return true;\n  }\n  \n  return false;\n};\n\n// Initialize localStorage management\nexport const initializeLocalStorage = () => {\n  console.log('üöÄ Initializing localStorage management...');\n  \n  // Clear localStorage if environment changed\n  clearLocalStorageOnEnvChange();\n  \n  // Clear invalid tokens\n  const hadInvalidToken = clearInvalidTokens();\n  \n  if (hadInvalidToken) {\n    console.log('‚ö†Ô∏è Invalid authentication data was cleared');\n  }\n  \n  console.log('‚úÖ localStorage management initialized');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}