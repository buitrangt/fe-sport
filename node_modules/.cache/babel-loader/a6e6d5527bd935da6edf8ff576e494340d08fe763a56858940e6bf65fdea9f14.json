{"ast":null,"code":"// Import the enhanced API client\nimport apiClient from './api';\n\n// ==================== USER MANAGEMENT SERVICE ====================\nexport const userManagementService = {\n  // Admin user management APIs\n  admin: {\n    // Get all users with pagination and filtering\n    getAllUsers: async (params = {}) => {\n      const response = await apiClient.get('/api/v1/admin/users', {\n        params\n      });\n      return response;\n    },\n    // Get user by ID  \n    getUserById: async id => {\n      const response = await apiClient.get(`/api/v1/admin/users/${id}`);\n      return response;\n    },\n    // Create new user\n    createUser: async userData => {\n      const response = await apiClient.post('/api/v1/admin/users', userData);\n      return response;\n    },\n    // Update user\n    updateUser: async (id, userData) => {\n      const response = await apiClient.put(`/api/v1/admin/users/${id}`, userData);\n      return response;\n    },\n    // Delete user (soft delete)\n    deleteUser: async id => {\n      const response = await apiClient.delete(`/api/v1/admin/users/${id}`);\n      return response;\n    },\n    // Toggle user status\n    toggleUserStatus: async (id, isActive) => {\n      const response = await apiClient.patch(`/api/v1/admin/users/${id}/status`, null, {\n        params: {\n          isActive\n        }\n      });\n      return response;\n    },\n    // Assign roles to user\n    assignRoles: async (id, roles) => {\n      const response = await apiClient.patch(`/api/v1/admin/users/${id}/roles`, roles);\n      return response;\n    },\n    // Reset user password\n    resetUserPassword: async (id, newPassword) => {\n      const response = await apiClient.patch(`/api/v1/admin/users/${id}/reset-password`, null, {\n        params: {\n          newPassword\n        }\n      });\n      return response;\n    },\n    // Get user statistics\n    getUserStatistics: async () => {\n      const response = await apiClient.get('/api/v1/admin/users/statistics');\n      return response;\n    },\n    // Bulk delete users\n    bulkDeleteUsers: async userIds => {\n      const response = await apiClient.delete('/api/v1/admin/users/bulk', {\n        data: userIds\n      });\n      return response;\n    },\n    // Export users to CSV\n    exportUsers: async (params = {}) => {\n      const response = await apiClient.get('/api/v1/admin/users/export', {\n        params,\n        responseType: 'text'\n      });\n      return response;\n    }\n  },\n  // User profile management\n  profile: {\n    // Get current user profile\n    getProfile: async () => {\n      const response = await apiClient.get('/api/v1/user/profile');\n      return response;\n    },\n    // Update profile\n    updateProfile: async profileData => {\n      const response = await apiClient.put('/api/v1/user/profile', profileData);\n      return response;\n    },\n    // Change password\n    changePassword: async (currentPassword, newPassword) => {\n      const response = await apiClient.patch('/api/v1/user/profile/change-password', null, {\n        params: {\n          currentPassword,\n          newPassword\n        }\n      });\n      return response;\n    },\n    // Upload avatar\n    uploadAvatar: async (file, onUploadProgress) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await apiClient.post('/api/v1/user/profile/avatar', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        onUploadProgress: progressEvent => {\n          if (onUploadProgress && progressEvent.total) {\n            const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n            onUploadProgress(percentCompleted);\n          }\n        }\n      });\n      return response;\n    },\n    // Delete avatar\n    deleteAvatar: async () => {\n      const response = await apiClient.delete('/api/v1/user/profile/avatar');\n      return response;\n    },\n    // Deactivate account\n    deactivateAccount: async () => {\n      const response = await apiClient.patch('/api/v1/user/profile/deactivate');\n      return response;\n    }\n  },\n  // Password reset\n  passwordReset: {\n    // Send forgot password email\n    forgotPassword: async email => {\n      const response = await apiClient.post('/api/v1/auth/password/forgot', null, {\n        params: {\n          email\n        }\n      });\n      return response;\n    },\n    // Verify reset token\n    verifyResetToken: async token => {\n      const response = await apiClient.get('/api/v1/auth/password/reset/verify', {\n        params: {\n          token\n        }\n      });\n      return response;\n    },\n    // Reset password with token\n    resetPassword: async (token, newPassword) => {\n      const response = await apiClient.post('/api/v1/auth/password/reset', null, {\n        params: {\n          token,\n          newPassword\n        }\n      });\n      return response;\n    }\n  },\n  // Role management\n  roles: {\n    // Get all roles\n    getAllRoles: async () => {\n      const response = await apiClient.get('/api/v1/admin/roles');\n      return response;\n    },\n    // Get role statistics\n    getRoleStatistics: async () => {\n      const response = await apiClient.get('/api/v1/admin/roles/statistics');\n      return response;\n    },\n    // Get users by role\n    getUsersByRole: async roleName => {\n      const response = await apiClient.get(`/api/v1/admin/roles/${roleName}/users`);\n      return response;\n    }\n  }\n};\n\n// Export for backward compatibility\nexport const adminUserService = userManagementService.admin;\nexport const userProfileService = userManagementService.profile;\nexport const passwordResetService = userManagementService.passwordReset;\nexport const roleManagementService = userManagementService.roles;","map":{"version":3,"names":["apiClient","userManagementService","admin","getAllUsers","params","response","get","getUserById","id","createUser","userData","post","updateUser","put","deleteUser","delete","toggleUserStatus","isActive","patch","assignRoles","roles","resetUserPassword","newPassword","getUserStatistics","bulkDeleteUsers","userIds","data","exportUsers","responseType","profile","getProfile","updateProfile","profileData","changePassword","currentPassword","uploadAvatar","file","onUploadProgress","formData","FormData","append","headers","progressEvent","total","percentCompleted","Math","round","loaded","deleteAvatar","deactivateAccount","passwordReset","forgotPassword","email","verifyResetToken","token","resetPassword","getAllRoles","getRoleStatistics","getUsersByRole","roleName","adminUserService","userProfileService","passwordResetService","roleManagementService"],"sources":["/Users/Pham13a07/Downloads/fe-sport/src/services/userManagement.js"],"sourcesContent":["// Import the enhanced API client\nimport apiClient from './api';\n\n// ==================== USER MANAGEMENT SERVICE ====================\nexport const userManagementService = {\n  // Admin user management APIs\n  admin: {\n    // Get all users with pagination and filtering\n    getAllUsers: async (params = {}) => {\n      const response = await apiClient.get('/api/v1/admin/users', { params });\n      return response;\n    },\n\n    // Get user by ID  \n    getUserById: async (id) => {\n      const response = await apiClient.get(`/api/v1/admin/users/${id}`);\n      return response;\n    },\n\n    // Create new user\n    createUser: async (userData) => {\n      const response = await apiClient.post('/api/v1/admin/users', userData);\n      return response;\n    },\n\n    // Update user\n    updateUser: async (id, userData) => {\n      const response = await apiClient.put(`/api/v1/admin/users/${id}`, userData);\n      return response;\n    },\n\n    // Delete user (soft delete)\n    deleteUser: async (id) => {\n      const response = await apiClient.delete(`/api/v1/admin/users/${id}`);\n      return response;\n    },\n\n    // Toggle user status\n    toggleUserStatus: async (id, isActive) => {\n      const response = await apiClient.patch(`/api/v1/admin/users/${id}/status`, null, {\n        params: { isActive }\n      });\n      return response;\n    },\n\n    // Assign roles to user\n    assignRoles: async (id, roles) => {\n      const response = await apiClient.patch(`/api/v1/admin/users/${id}/roles`, roles);\n      return response;\n    },\n\n    // Reset user password\n    resetUserPassword: async (id, newPassword) => {\n      const response = await apiClient.patch(`/api/v1/admin/users/${id}/reset-password`, null, {\n        params: { newPassword }\n      });\n      return response;\n    },\n\n    // Get user statistics\n    getUserStatistics: async () => {\n      const response = await apiClient.get('/api/v1/admin/users/statistics');\n      return response;\n    },\n\n    // Bulk delete users\n    bulkDeleteUsers: async (userIds) => {\n      const response = await apiClient.delete('/api/v1/admin/users/bulk', {\n        data: userIds\n      });\n      return response;\n    },\n\n    // Export users to CSV\n    exportUsers: async (params = {}) => {\n      const response = await apiClient.get('/api/v1/admin/users/export', { \n        params,\n        responseType: 'text'\n      });\n      return response;\n    },\n  },\n\n  // User profile management\n  profile: {\n    // Get current user profile\n    getProfile: async () => {\n      const response = await apiClient.get('/api/v1/user/profile');\n      return response;\n    },\n\n    // Update profile\n    updateProfile: async (profileData) => {\n      const response = await apiClient.put('/api/v1/user/profile', profileData);\n      return response;\n    },\n\n    // Change password\n    changePassword: async (currentPassword, newPassword) => {\n      const response = await apiClient.patch('/api/v1/user/profile/change-password', null, {\n        params: { currentPassword, newPassword }\n      });\n      return response;\n    },\n\n    // Upload avatar\n    uploadAvatar: async (file, onUploadProgress) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await apiClient.post('/api/v1/user/profile/avatar', formData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n        onUploadProgress: (progressEvent) => {\n          if (onUploadProgress && progressEvent.total) {\n            const percentCompleted = Math.round(\n              (progressEvent.loaded * 100) / progressEvent.total\n            );\n            onUploadProgress(percentCompleted);\n          }\n        },\n      });\n      return response;\n    },\n\n    // Delete avatar\n    deleteAvatar: async () => {\n      const response = await apiClient.delete('/api/v1/user/profile/avatar');\n      return response;\n    },\n\n    // Deactivate account\n    deactivateAccount: async () => {\n      const response = await apiClient.patch('/api/v1/user/profile/deactivate');\n      return response;\n    },\n  },\n\n  // Password reset\n  passwordReset: {\n    // Send forgot password email\n    forgotPassword: async (email) => {\n      const response = await apiClient.post('/api/v1/auth/password/forgot', null, {\n        params: { email }\n      });\n      return response;\n    },\n\n    // Verify reset token\n    verifyResetToken: async (token) => {\n      const response = await apiClient.get('/api/v1/auth/password/reset/verify', {\n        params: { token }\n      });\n      return response;\n    },\n\n    // Reset password with token\n    resetPassword: async (token, newPassword) => {\n      const response = await apiClient.post('/api/v1/auth/password/reset', null, {\n        params: { token, newPassword }\n      });\n      return response;\n    },\n  },\n\n  // Role management\n  roles: {\n    // Get all roles\n    getAllRoles: async () => {\n      const response = await apiClient.get('/api/v1/admin/roles');\n      return response;\n    },\n\n    // Get role statistics\n    getRoleStatistics: async () => {\n      const response = await apiClient.get('/api/v1/admin/roles/statistics');\n      return response;\n    },\n\n    // Get users by role\n    getUsersByRole: async (roleName) => {\n      const response = await apiClient.get(`/api/v1/admin/roles/${roleName}/users`);\n      return response;\n    },\n  },\n};\n\n// Export for backward compatibility\nexport const adminUserService = userManagementService.admin;\nexport const userProfileService = userManagementService.profile;\nexport const passwordResetService = userManagementService.passwordReset;\nexport const roleManagementService = userManagementService.roles;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}