{"ast":null,"code":"import apiClient from './apiClient';\nimport { createFileUploadConfig } from './apiClient';\nconst API_BASE_PATH = '/api/v1/news';\nconst newsService = {\n  // Get all news articles\n  getAllNews: async () => {\n    try {\n      var _newsList;\n      console.log('🔗 [NewsService] Calling API:', API_BASE_PATH);\n      console.log('🔗 [NewsService] Full URL:', `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}`);\n      const response = await apiClient.get(API_BASE_PATH);\n      console.log('✅ [NewsService] Raw API Response:', response);\n      console.log('✅ [NewsService] Response type:', typeof response);\n      console.log('✅ [NewsService] Response is array:', Array.isArray(response));\n\n      // Debug: Log all response properties\n      if (response && typeof response === 'object') {\n        console.log('✅ [NewsService] Response keys:', Object.keys(response));\n\n        // Check each key\n        Object.keys(response).forEach(key => {\n          console.log(`✅ [NewsService] response.${key}:`, response[key]);\n        });\n      }\n\n      // Handle different response structures\n      let newsList;\n      if (Array.isArray(response)) {\n        console.log('✅ [NewsService] Using direct array response');\n        newsList = response;\n      } else if (response !== null && response !== void 0 && response.data && Array.isArray(response.data)) {\n        console.log('✅ [NewsService] Using response.data array');\n        newsList = response.data;\n      } else if (response !== null && response !== void 0 && response.content && Array.isArray(response.content)) {\n        console.log('✅ [NewsService] Using response.content array');\n        newsList = response.content;\n      } else if (response !== null && response !== void 0 && response.items && Array.isArray(response.items)) {\n        console.log('✅ [NewsService] Using response.items array');\n        newsList = response.items;\n      } else {\n        console.warn('⚠️ [NewsService] Unexpected response structure:', response);\n        // As fallback, if response itself is truthy but not an array, return empty array\n        newsList = [];\n      }\n      console.log('✅ [NewsService] Final processed newsList:', newsList);\n      console.log('✅ [NewsService] newsList length:', ((_newsList = newsList) === null || _newsList === void 0 ? void 0 : _newsList.length) || 0);\n\n      // Ensure we always return an array\n      const result = Array.isArray(newsList) ? newsList : [];\n      console.log('✅ [NewsService] Returning result:', result);\n      return result;\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('❌ [NewsService] API Error:', error);\n      console.error('❌ [NewsService] Error status:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status);\n      console.error('❌ [NewsService] Error data:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      throw error;\n    }\n  },\n  // Get news by ID\n  getNewsById: async id => {\n    try {\n      const newsArticle = await apiClient.get(`${API_BASE_PATH}/${id}`);\n      return newsArticle;\n    } catch (error) {\n      console.error(`Error fetching news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  createNews: async newsData => {\n    try {\n      console.log('🔗 [NewsService] Creating news:', newsData);\n      const response = await apiClient.post(API_BASE_PATH, newsData);\n      console.log('✅ [NewsService] Create response:', response);\n\n      // Handle different response structures\n      const result = (response === null || response === void 0 ? void 0 : response.data) || response;\n      console.log('✅ [NewsService] Processed create result:', result);\n      return result;\n    } catch (error) {\n      console.error('❌ [NewsService] Create error:', error);\n      throw error;\n    }\n  },\n  // Update a news article\n  updateNews: async (id, newsData) => {\n    try {\n      const response = await apiClient.put(`${API_BASE_PATH}/${id}`, newsData);\n      return response;\n    } catch (error) {\n      console.error(`Error updating news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  // Delete a news article\n  deleteNews: async id => {\n    try {\n      const response = await apiClient.delete(`${API_BASE_PATH}/${id}`);\n      return response;\n    } catch (error) {\n      console.error(`Error deleting news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  uploadNewsAttachments: async (newsId, file, onUploadProgress) => {\n    try {\n      const formData = new FormData();\n      formData.append('files', file);\n      const config = createFileUploadConfig(onUploadProgress);\n      const response = await apiClient.post(`${API_BASE_PATH}/uploads/${newsId}`, formData, config);\n      return response;\n    } catch (error) {\n      console.error(`Error uploading attachment for news ID ${newsId}:`, error);\n      throw error;\n    }\n  },\n  getImageUrl: imageName => {\n    return `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}/image/${imageName}`;\n  }\n};\nexport default newsService;","map":{"version":3,"names":["apiClient","createFileUploadConfig","API_BASE_PATH","newsService","getAllNews","_newsList","console","log","process","env","REACT_APP_API_URL","response","get","Array","isArray","Object","keys","forEach","key","newsList","data","content","items","warn","length","result","error","_error$response","_error$response2","status","getNewsById","id","newsArticle","createNews","newsData","post","updateNews","put","deleteNews","delete","uploadNewsAttachments","newsId","file","onUploadProgress","formData","FormData","append","config","getImageUrl","imageName"],"sources":["C:/Users/ACER/Desktop/fe/fe-edu/src/services/newsService.js"],"sourcesContent":["import apiClient from './apiClient'; \nimport { createFileUploadConfig } from './apiClient'; \n\nconst API_BASE_PATH = '/api/v1/news';\n\nconst newsService = {\n  // Get all news articles\n  getAllNews: async () => {\n    try {\n      console.log('🔗 [NewsService] Calling API:', API_BASE_PATH);\n      console.log('🔗 [NewsService] Full URL:', `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}`);\n      \n      const response = await apiClient.get(API_BASE_PATH);\n      console.log('✅ [NewsService] Raw API Response:', response);\n      console.log('✅ [NewsService] Response type:', typeof response);\n      console.log('✅ [NewsService] Response is array:', Array.isArray(response));\n      \n      // Debug: Log all response properties\n      if (response && typeof response === 'object') {\n        console.log('✅ [NewsService] Response keys:', Object.keys(response));\n        \n        // Check each key\n        Object.keys(response).forEach(key => {\n          console.log(`✅ [NewsService] response.${key}:`, response[key]);\n        });\n      }\n      \n      // Handle different response structures\n      let newsList;\n      if (Array.isArray(response)) {\n        console.log('✅ [NewsService] Using direct array response');\n        newsList = response;\n      } else if (response?.data && Array.isArray(response.data)) {\n        console.log('✅ [NewsService] Using response.data array');\n        newsList = response.data;\n      } else if (response?.content && Array.isArray(response.content)) {\n        console.log('✅ [NewsService] Using response.content array');\n        newsList = response.content;\n      } else if (response?.items && Array.isArray(response.items)) {\n        console.log('✅ [NewsService] Using response.items array');\n        newsList = response.items;\n      } else {\n        console.warn('⚠️ [NewsService] Unexpected response structure:', response);\n        // As fallback, if response itself is truthy but not an array, return empty array\n        newsList = [];\n      }\n      \n      console.log('✅ [NewsService] Final processed newsList:', newsList);\n      console.log('✅ [NewsService] newsList length:', newsList?.length || 0);\n      \n      // Ensure we always return an array\n      const result = Array.isArray(newsList) ? newsList : [];\n      console.log('✅ [NewsService] Returning result:', result);\n      return result;\n    } catch (error) {\n      console.error('❌ [NewsService] API Error:', error);\n      console.error('❌ [NewsService] Error status:', error.response?.status);\n      console.error('❌ [NewsService] Error data:', error.response?.data);\n      throw error; \n    }\n  },\n\n  // Get news by ID\n  getNewsById: async (id) => {\n    try {\n      const newsArticle = await apiClient.get(`${API_BASE_PATH}/${id}`);\n      return newsArticle;\n    } catch (error) {\n      console.error(`Error fetching news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  createNews: async (newsData) => {\n    try {\n      console.log('🔗 [NewsService] Creating news:', newsData);\n      const response = await apiClient.post(API_BASE_PATH, newsData);\n      console.log('✅ [NewsService] Create response:', response);\n      \n      // Handle different response structures\n      const result = response?.data || response;\n      console.log('✅ [NewsService] Processed create result:', result);\n      \n      return result;\n    } catch (error) {\n      console.error('❌ [NewsService] Create error:', error);\n      throw error;\n    }\n  },\n\n  // Update a news article\n  updateNews: async (id, newsData) => {\n    try {\n      const response = await apiClient.put(`${API_BASE_PATH}/${id}`, newsData);\n      return response;\n    } catch (error) {\n      console.error(`Error updating news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  // Delete a news article\n  deleteNews: async (id) => {\n    try {\n      const response = await apiClient.delete(`${API_BASE_PATH}/${id}`);\n      return response;\n    } catch (error) {\n      console.error(`Error deleting news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  uploadNewsAttachments: async (newsId, file, onUploadProgress) => {\n    try {\n      const formData = new FormData();\n      formData.append('files', file); \n\n      const config = createFileUploadConfig(onUploadProgress);\n      const response = await apiClient.post(`${API_BASE_PATH}/uploads/${newsId}`, formData, config);\n      return response;\n    } catch (error) {\n      console.error(`Error uploading attachment for news ID ${newsId}:`, error);\n      throw error;\n    }\n  },\n\n  getImageUrl: (imageName) => {\n    return `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}/image/${imageName}`;\n  }\n};\n\nexport default newsService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}