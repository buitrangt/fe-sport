{"ast":null,"code":"// Environment and localStorage management utility\nexport const ENV_KEY='app_environment';export const TOKEN_KEY='accessToken';export const BUILD_TIMESTAMP_KEY='build_timestamp';// Get current environment\nexport const getCurrentEnv=()=>{return process.env.NODE_ENV||'development';};// Get build timestamp (different for each build)\nexport const getBuildTimestamp=()=>{// Use build time or app version to detect new builds\nreturn process.env.REACT_APP_BUILD_TIME||Date.now().toString();};// Check if this is a fresh build/deployment\nexport const isFreshBuild=()=>{const currentTimestamp=getBuildTimestamp();const storedTimestamp=localStorage.getItem(BUILD_TIMESTAMP_KEY);console.log('üîç Build check:',{current:currentTimestamp,stored:storedTimestamp});return!storedTimestamp||storedTimestamp!==currentTimestamp;};// Check if environment changed since last run\nexport const hasEnvironmentChanged=()=>{const currentEnv=getCurrentEnv();const storedEnv=localStorage.getItem(ENV_KEY);console.log('üîç Environment check:',{current:currentEnv,stored:storedEnv});return storedEnv&&storedEnv!==currentEnv;};// Force clear localStorage for production builds\nexport const forceProductionClear=()=>{const currentEnv=getCurrentEnv();if(currentEnv==='production'){console.log('üè≠ Production environment detected, clearing authentication...');// Always clear auth data in production for security\nlocalStorage.removeItem(TOKEN_KEY);localStorage.removeItem('user');localStorage.removeItem('refreshToken');// Clear any auth-related keys\nconst authKeys=['token','auth','session','login','admin'];Object.keys(localStorage).forEach(key=>{if(authKeys.some(authKey=>key.toLowerCase().includes(authKey))){localStorage.removeItem(key);console.log(\"\\uD83D\\uDDD1\\uFE0F [PRODUCTION] Removed: \".concat(key));}});console.log('‚úÖ Production authentication cleared');return true;}return false;};// Clear localStorage if environment changed\nexport const clearLocalStorageOnEnvChange=()=>{if(hasEnvironmentChanged()){console.log('üßπ Environment changed, clearing localStorage...');// Clear auth-related data\nlocalStorage.removeItem(TOKEN_KEY);localStorage.removeItem('user');localStorage.removeItem('refreshToken');// Clear any other app-specific data that might be invalid\nconst keysToKeep=['theme','language','preferences'];// Keep user preferences\nconst allKeys=Object.keys(localStorage);allKeys.forEach(key=>{if(!keysToKeep.includes(key)&&key!==ENV_KEY){localStorage.removeItem(key);console.log(\"\\uD83D\\uDDD1\\uFE0F Removed: \".concat(key));}});console.log('‚úÖ localStorage cleared for environment change');}// Update stored environment\nconst currentEnv=getCurrentEnv();localStorage.setItem(ENV_KEY,currentEnv);console.log('üìù Environment stored:',currentEnv);};// Check if token exists and is valid format\nexport const isValidToken=token=>{if(!token||typeof token!=='string'){return false;}// Basic token format validation\nif(token.length<10){return false;}// Check if it looks like a JWT token\nif(token.includes('.')&&token.split('.').length===3){return true;}// Check if it's a basic token format\nif(token.length>20&&/^[A-Za-z0-9+/=.-]+$/.test(token)){return true;}return false;};// Clear invalid tokens\nexport const clearInvalidTokens=()=>{const token=localStorage.getItem(TOKEN_KEY);if(token&&!isValidToken(token)){console.log('üßπ Invalid token format detected, removing...');localStorage.removeItem(TOKEN_KEY);localStorage.removeItem('user');return true;}return false;};// Initialize localStorage management\nexport const initializeLocalStorage=()=>{console.log('üöÄ Initializing localStorage management...');// FORCE clear for production builds\nconst productionCleared=forceProductionClear();if(!productionCleared){// Only check environment change if not production\nclearLocalStorageOnEnvChange();}// Clear invalid tokens\nconst hadInvalidToken=clearInvalidTokens();if(hadInvalidToken){console.log('‚ö†Ô∏è Invalid authentication data was cleared');}// Update build timestamp\nconst currentTimestamp=getBuildTimestamp();localStorage.setItem(BUILD_TIMESTAMP_KEY,currentTimestamp);console.log('‚úÖ localStorage management initialized');};","map":{"version":3,"names":["ENV_KEY","TOKEN_KEY","BUILD_TIMESTAMP_KEY","getCurrentEnv","process","env","NODE_ENV","getBuildTimestamp","REACT_APP_BUILD_TIME","Date","now","toString","isFreshBuild","currentTimestamp","storedTimestamp","localStorage","getItem","console","log","current","stored","hasEnvironmentChanged","currentEnv","storedEnv","forceProductionClear","removeItem","authKeys","Object","keys","forEach","key","some","authKey","toLowerCase","includes","concat","clearLocalStorageOnEnvChange","keysToKeep","allKeys","setItem","isValidToken","token","length","split","test","clearInvalidTokens","initializeLocalStorage","productionCleared","hadInvalidToken"],"sources":["C:/Users/ACER/Desktop/fe/fe-edu/src/utils/localStorageManager.js"],"sourcesContent":["// Environment and localStorage management utility\n\nexport const ENV_KEY = 'app_environment';\nexport const TOKEN_KEY = 'accessToken';\nexport const BUILD_TIMESTAMP_KEY = 'build_timestamp';\n\n// Get current environment\nexport const getCurrentEnv = () => {\n  return process.env.NODE_ENV || 'development';\n};\n\n// Get build timestamp (different for each build)\nexport const getBuildTimestamp = () => {\n  // Use build time or app version to detect new builds\n  return process.env.REACT_APP_BUILD_TIME || Date.now().toString();\n};\n\n// Check if this is a fresh build/deployment\nexport const isFreshBuild = () => {\n  const currentTimestamp = getBuildTimestamp();\n  const storedTimestamp = localStorage.getItem(BUILD_TIMESTAMP_KEY);\n  \n  console.log('üîç Build check:', { current: currentTimestamp, stored: storedTimestamp });\n  \n  return !storedTimestamp || storedTimestamp !== currentTimestamp;\n};\n\n// Check if environment changed since last run\nexport const hasEnvironmentChanged = () => {\n  const currentEnv = getCurrentEnv();\n  const storedEnv = localStorage.getItem(ENV_KEY);\n  \n  console.log('üîç Environment check:', { current: currentEnv, stored: storedEnv });\n  \n  return storedEnv && storedEnv !== currentEnv;\n};\n\n// Force clear localStorage for production builds\nexport const forceProductionClear = () => {\n  const currentEnv = getCurrentEnv();\n  \n  if (currentEnv === 'production') {\n    console.log('üè≠ Production environment detected, clearing authentication...');\n    \n    // Always clear auth data in production for security\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem('user');\n    localStorage.removeItem('refreshToken');\n    \n    // Clear any auth-related keys\n    const authKeys = ['token', 'auth', 'session', 'login', 'admin'];\n    Object.keys(localStorage).forEach(key => {\n      if (authKeys.some(authKey => key.toLowerCase().includes(authKey))) {\n        localStorage.removeItem(key);\n        console.log(`üóëÔ∏è [PRODUCTION] Removed: ${key}`);\n      }\n    });\n    \n    console.log('‚úÖ Production authentication cleared');\n    return true;\n  }\n  \n  return false;\n};\n\n// Clear localStorage if environment changed\nexport const clearLocalStorageOnEnvChange = () => {\n  if (hasEnvironmentChanged()) {\n    console.log('üßπ Environment changed, clearing localStorage...');\n    \n    // Clear auth-related data\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem('user');\n    localStorage.removeItem('refreshToken');\n    \n    // Clear any other app-specific data that might be invalid\n    const keysToKeep = ['theme', 'language', 'preferences']; // Keep user preferences\n    const allKeys = Object.keys(localStorage);\n    \n    allKeys.forEach(key => {\n      if (!keysToKeep.includes(key) && key !== ENV_KEY) {\n        localStorage.removeItem(key);\n        console.log(`üóëÔ∏è Removed: ${key}`);\n      }\n    });\n    \n    console.log('‚úÖ localStorage cleared for environment change');\n  }\n  \n  // Update stored environment\n  const currentEnv = getCurrentEnv();\n  localStorage.setItem(ENV_KEY, currentEnv);\n  console.log('üìù Environment stored:', currentEnv);\n};\n\n// Check if token exists and is valid format\nexport const isValidToken = (token) => {\n  if (!token || typeof token !== 'string') {\n    return false;\n  }\n  \n  // Basic token format validation\n  if (token.length < 10) {\n    return false;\n  }\n  \n  // Check if it looks like a JWT token\n  if (token.includes('.') && token.split('.').length === 3) {\n    return true;\n  }\n  \n  // Check if it's a basic token format\n  if (token.length > 20 && /^[A-Za-z0-9+/=.-]+$/.test(token)) {\n    return true;\n  }\n  \n  return false;\n};\n\n// Clear invalid tokens\nexport const clearInvalidTokens = () => {\n  const token = localStorage.getItem(TOKEN_KEY);\n  \n  if (token && !isValidToken(token)) {\n    console.log('üßπ Invalid token format detected, removing...');\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem('user');\n    return true;\n  }\n  \n  return false;\n};\n\n// Initialize localStorage management\nexport const initializeLocalStorage = () => {\n  console.log('üöÄ Initializing localStorage management...');\n  \n  // FORCE clear for production builds\n  const productionCleared = forceProductionClear();\n  \n  if (!productionCleared) {\n    // Only check environment change if not production\n    clearLocalStorageOnEnvChange();\n  }\n  \n  // Clear invalid tokens\n  const hadInvalidToken = clearInvalidTokens();\n  \n  if (hadInvalidToken) {\n    console.log('‚ö†Ô∏è Invalid authentication data was cleared');\n  }\n  \n  // Update build timestamp\n  const currentTimestamp = getBuildTimestamp();\n  localStorage.setItem(BUILD_TIMESTAMP_KEY, currentTimestamp);\n  \n  console.log('‚úÖ localStorage management initialized');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}