{"ast":null,"code":"// src/services/newsService.js\nimport apiClient from './apiClient'; // Import apiClient từ file apiClient.js của bạn\nimport { createFileUploadConfig } from './apiClient'; // Import helper cho upload\n\n// Đường dẫn cơ sở cho API News\nconst API_BASE_PATH = '/api/v1/news';\nconst newsService = {\n  // Get all news articles\n  getAllNews: async () => {\n    try {\n      // apiClient.get đã trả về response.data.\n      // Dựa trên các log trước đó, API này trả về một mảng tin tức trực tiếp.\n      const newsList = await apiClient.get(API_BASE_PATH);\n      return newsList;\n    } catch (error) {\n      console.error(\"Error fetching all news:\", error);\n      throw error; // Ném lỗi để component có thể bắt và xử lý\n    }\n  },\n  // Get news by ID\n  getNewsById: async id => {\n    try {\n      const newsArticle = await apiClient.get(`${API_BASE_PATH}/${id}`);\n      return newsArticle;\n    } catch (error) {\n      console.error(`Error fetching news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  // Create a new news article\n  // Hàm này sẽ trả về response từ backend, bao gồm ID của tin tức vừa tạo.\n  createNews: async newsData => {\n    try {\n      const response = await apiClient.post(API_BASE_PATH, newsData);\n      // Backend của bạn có thể trả về:\n      // 1. `{ id: ..., name: ..., ... }` trực tiếp\n      // 2. `{ success: true, message: \"...\", data: { id: ..., ... } }`\n      // Chúng ta sẽ trả về toàn bộ `response` từ apiClient, và để component xử lý.\n      // Tuy nhiên, để nhất quán, chúng ta sẽ cố gắng trả về `data` nếu có, hoặc toàn bộ `response`\n      return response.data || response;\n    } catch (error) {\n      console.error(\"Error creating news:\", error);\n      throw error;\n    }\n  },\n  // Update a news article\n  updateNews: async (id, newsData) => {\n    try {\n      const response = await apiClient.put(`${API_BASE_PATH}/${id}`, newsData);\n      return response;\n    } catch (error) {\n      console.error(`Error updating news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  // Delete a news article\n  deleteNews: async id => {\n    try {\n      const response = await apiClient.delete(`${API_BASE_PATH}/${id}`);\n      return response;\n    } catch (error) {\n      console.error(`Error deleting news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  // Upload attachments for a news article (Chỉ 1 file như Angular cũ của bạn)\n  // Backend API của bạn nhận FormData với key 'files', chấp nhận nhiều file.\n  // Ở đây chúng ta sẽ gửi chỉ 1 file.\n  uploadNewsAttachments: async (newsId, file, onUploadProgress) => {\n    // Tham số là 'file' (số ít)\n    try {\n      const formData = new FormData();\n      // Đảm bảo key là 'files' như backend của bạn mong đợi\n      formData.append('files', file); // Append một file duy nhất\n\n      const config = createFileUploadConfig(onUploadProgress);\n      const response = await apiClient.post(`${API_BASE_PATH}/uploads/${newsId}`, formData, config);\n      return response;\n    } catch (error) {\n      console.error(`Error uploading attachment for news ID ${newsId}:`, error);\n      throw error;\n    }\n  },\n  // Get image by name (for displaying attachments)\n  getImageUrl: imageName => {\n    // Sử dụng process.env.REACT_APP_API_URL hoặc fallback về localhost\n    // Đường dẫn này phải khớp với cách backend phục vụ file ảnh\n    // Ví dụ: http://localhost:8080/api/v1/news/image/image_name.jpg\n    return `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}/image/${imageName}`;\n  }\n};\nexport default newsService;","map":{"version":3,"names":["apiClient","createFileUploadConfig","API_BASE_PATH","newsService","getAllNews","newsList","get","error","console","getNewsById","id","newsArticle","createNews","newsData","response","post","data","updateNews","put","deleteNews","delete","uploadNewsAttachments","newsId","file","onUploadProgress","formData","FormData","append","config","getImageUrl","imageName","process","env","REACT_APP_API_URL"],"sources":["/Users/lucas/Desktop/an/fe-edu/src/services/newsService.js"],"sourcesContent":["// src/services/newsService.js\nimport apiClient from './apiClient'; // Import apiClient từ file apiClient.js của bạn\nimport { createFileUploadConfig } from './apiClient'; // Import helper cho upload\n\n// Đường dẫn cơ sở cho API News\nconst API_BASE_PATH = '/api/v1/news';\n\nconst newsService = {\n  // Get all news articles\n  getAllNews: async () => {\n    try {\n      // apiClient.get đã trả về response.data.\n      // Dựa trên các log trước đó, API này trả về một mảng tin tức trực tiếp.\n      const newsList = await apiClient.get(API_BASE_PATH);\n      return newsList;\n    } catch (error) {\n      console.error(\"Error fetching all news:\", error);\n      throw error; // Ném lỗi để component có thể bắt và xử lý\n    }\n  },\n\n  // Get news by ID\n  getNewsById: async (id) => {\n    try {\n      const newsArticle = await apiClient.get(`${API_BASE_PATH}/${id}`);\n      return newsArticle;\n    } catch (error) {\n      console.error(`Error fetching news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  // Create a new news article\n  // Hàm này sẽ trả về response từ backend, bao gồm ID của tin tức vừa tạo.\n  createNews: async (newsData) => {\n    try {\n      const response = await apiClient.post(API_BASE_PATH, newsData);\n      // Backend của bạn có thể trả về:\n      // 1. `{ id: ..., name: ..., ... }` trực tiếp\n      // 2. `{ success: true, message: \"...\", data: { id: ..., ... } }`\n      // Chúng ta sẽ trả về toàn bộ `response` từ apiClient, và để component xử lý.\n      // Tuy nhiên, để nhất quán, chúng ta sẽ cố gắng trả về `data` nếu có, hoặc toàn bộ `response`\n      return response.data || response;\n    } catch (error) {\n      console.error(\"Error creating news:\", error);\n      throw error;\n    }\n  },\n\n  // Update a news article\n  updateNews: async (id, newsData) => {\n    try {\n      const response = await apiClient.put(`${API_BASE_PATH}/${id}`, newsData);\n      return response;\n    } catch (error) {\n      console.error(`Error updating news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  // Delete a news article\n  deleteNews: async (id) => {\n    try {\n      const response = await apiClient.delete(`${API_BASE_PATH}/${id}`);\n      return response;\n    } catch (error) {\n      console.error(`Error deleting news with ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  // Upload attachments for a news article (Chỉ 1 file như Angular cũ của bạn)\n  // Backend API của bạn nhận FormData với key 'files', chấp nhận nhiều file.\n  // Ở đây chúng ta sẽ gửi chỉ 1 file.\n  uploadNewsAttachments: async (newsId, file, onUploadProgress) => { // Tham số là 'file' (số ít)\n    try {\n      const formData = new FormData();\n      // Đảm bảo key là 'files' như backend của bạn mong đợi\n      formData.append('files', file); // Append một file duy nhất\n\n      const config = createFileUploadConfig(onUploadProgress);\n      const response = await apiClient.post(`${API_BASE_PATH}/uploads/${newsId}`, formData, config);\n      return response;\n    } catch (error) {\n      console.error(`Error uploading attachment for news ID ${newsId}:`, error);\n      throw error;\n    }\n  },\n\n  // Get image by name (for displaying attachments)\n  getImageUrl: (imageName) => {\n    // Sử dụng process.env.REACT_APP_API_URL hoặc fallback về localhost\n    // Đường dẫn này phải khớp với cách backend phục vụ file ảnh\n    // Ví dụ: http://localhost:8080/api/v1/news/image/image_name.jpg\n    return `${process.env.REACT_APP_API_URL || 'http://localhost:8080'}${API_BASE_PATH}/image/${imageName}`;\n  }\n};\n\nexport default newsService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}