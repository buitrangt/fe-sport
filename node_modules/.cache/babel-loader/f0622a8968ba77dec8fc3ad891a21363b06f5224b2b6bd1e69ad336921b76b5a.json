{"ast":null,"code":"import apiClient from './api';\nimport { userManagementService, adminUserService, userProfileService, passwordResetService, roleManagementService } from './userManagement';\n\n// ==================== AUTH SERVICE ====================\nexport const authService = {\n  // Register new user\n  register: async userData => {\n    const response = await apiClient.post('/api/v1/auth/register', userData);\n    return response.data;\n  },\n  // Login user\n  login: async credentials => {\n    const response = await apiClient.post('/api/v1/auth/login', credentials);\n    return response.data;\n  },\n  // Get current user account\n  getAccount: async () => {\n    const response = await apiClient.get('/api/v1/auth/account');\n    return response.data;\n  },\n  // Logout user\n  logout: async () => {\n    const response = await apiClient.post('/api/v1/auth/logout');\n    return response.data;\n  },\n  // Refresh token\n  refreshToken: async () => {\n    const response = await apiClient.post('/api/v1/auth/refresh');\n    return response.data;\n  }\n};\n\n// ==================== TOURNAMENT SERVICE ====================\nexport const tournamentService = {\n  // Get all tournaments\n  getAllTournaments: async (params = {}) => {\n    console.log('🏟️ [TournamentService] Getting all tournaments with params:', params);\n    try {\n      const response = await apiClient.get('/api/tournaments', {\n        params\n      });\n      console.log('✅ [TournamentService] Get all tournaments success:', response);\n\n      // Backend returns PaginatedResponseDTO format\n      // Transform to expected frontend format\n      if (response && response.data) {\n        var _response$data, _response$data2;\n        return {\n          data: response.data,\n          pagination: response.pagination || {\n            currentPage: params.page || 1,\n            totalPages: Math.ceil((((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.length) || 0) / (params.limit || 10)),\n            totalItems: ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.length) || 0,\n            hasNext: false,\n            hasPrev: false\n          }\n        };\n      }\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentService] Get all tournaments failed:', error);\n      throw error;\n    }\n  },\n  // Get tournament by ID\n  getTournamentById: async id => {\n    console.log('🏟️ [TournamentService] Getting tournament by ID:', id);\n    try {\n      const response = await apiClient.get(`/api/tournaments/${id}`);\n      console.log('✅ [TournamentService] Get tournament by ID success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentService] Get tournament by ID failed:', error);\n      throw error;\n    }\n  },\n  // Create tournament\n  createTournament: async tournamentData => {\n    console.log('🏟️ [TournamentService] Creating tournament with data:', tournamentData);\n    try {\n      const response = await apiClient.post('/api/tournaments', tournamentData);\n      console.log('✅ [TournamentService] Create tournament success:', response);\n      return response;\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('❌ [TournamentService] Create tournament failed:', error);\n      console.error('Error details:', {\n        status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n        data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n        message: error.message\n      });\n      throw error;\n    }\n  },\n  // Update tournament\n  updateTournament: async (id, tournamentData) => {\n    console.log('🏟️ [TournamentService] Updating tournament:', id, tournamentData);\n    try {\n      const response = await apiClient.put(`/api/tournaments/${id}`, tournamentData);\n      console.log('✅ [TournamentService] Update tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentService] Update tournament failed:', error);\n      throw error;\n    }\n  },\n  // Delete tournament\n  deleteTournament: async id => {\n    console.log('🏟️ [TournamentService] Deleting tournament:', id);\n    try {\n      const response = await apiClient.delete(`/api/tournaments/${id}`);\n      console.log('✅ [TournamentService] Delete tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentService] Delete tournament failed:', error);\n      throw error;\n    }\n  },\n  // Start tournament\n  startTournament: async id => {\n    console.log('🏟️ [TournamentService] Starting tournament:', id);\n    try {\n      const response = await apiClient.post(`/api/tournaments/${id}/start`);\n      console.log('✅ [TournamentService] Start tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentService] Start tournament failed:', error);\n      throw error;\n    }\n  }\n};\n\n// ==================== TOURNAMENT KNOCKOUT SERVICE ====================\nexport const tournamentKnockoutService = {\n  // Generate tournament bracket\n  generateBracket: async (tournamentId, bracketData) => {\n    console.log('🎯 [TournamentKnockout] Generating bracket for tournament:', tournamentId);\n    console.log('Data:', bracketData);\n    try {\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/generate-bracket`, bracketData);\n      console.log('✅ [TournamentKnockout] Generate bracket success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentKnockout] Generate bracket failed:', error);\n      throw error;\n    }\n  },\n  // Start knockout tournament\n  startKnockout: async tournamentId => {\n    console.log('🚀 [TournamentKnockout] Starting knockout tournament:', tournamentId);\n    try {\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/start-knockout`);\n      console.log('✅ [TournamentKnockout] Start knockout success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentKnockout] Start knockout failed:', error);\n      throw error;\n    }\n  },\n  // Advance to next round\n  advanceRound: async tournamentId => {\n    console.log('⏭️ [TournamentKnockout] Advancing round for tournament:', tournamentId);\n    try {\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/advance-round`);\n      console.log('✅ [TournamentKnockout] Advance round success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentKnockout] Advance round failed:', error);\n      throw error;\n    }\n  },\n  // Complete tournament\n  completeTournament: async tournamentId => {\n    console.log('🏆 [TournamentKnockout] Completing tournament:', tournamentId);\n    try {\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/complete`);\n      console.log('✅ [TournamentKnockout] Complete tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentKnockout] Complete tournament failed:', error);\n      throw error;\n    }\n  }\n};\n\n// ==================== TEAM SERVICE ====================\nexport const teamService = {\n  // Get teams by tournament\n  getTeamsByTournament: async tournamentId => {\n    console.log('👥 [TeamService] Getting teams by tournament ID:', tournamentId);\n    try {\n      const response = await apiClient.get(`/api/tournaments/${tournamentId}/teams`);\n      console.log('✅ [TeamService] Get teams by tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TeamService] Get teams by tournament failed:', error);\n      throw error;\n    }\n  },\n  // Get team by ID\n  getTeamById: async id => {\n    const response = await apiClient.get(`/api/teams/${id}`);\n    return response.data;\n  },\n  // Register team for tournament\n  registerTeam: async (tournamentId, teamData) => {\n    console.log('🚀 [TeamService] Register team request:');\n    console.log('  Tournament ID:', tournamentId);\n    console.log('  Team Data:', teamData);\n    console.log('  Full URL:', `/api/tournaments/${tournamentId}/register`);\n    console.log('  Token:', localStorage.getItem('accessToken') ? 'Present' : 'Missing');\n    try {\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/register`, teamData);\n      console.log('✅ [TeamService] Register team success:', response);\n      return response;\n    } catch (error) {\n      var _error$response3, _error$response4, _error$response5;\n      console.error('❌ [TeamService] Register team failed:');\n      console.error('  Status:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status);\n      console.error('  Data:', (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data);\n      console.error('  Headers:', (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.headers);\n      console.error('  Request config:', error.config);\n      throw error;\n    }\n  },\n  // Update team\n  updateTeam: async (id, teamData) => {\n    const response = await apiClient.put(`/api/teams/${id}`, teamData);\n    return response.data;\n  },\n  // Delete team\n  deleteTeam: async id => {\n    const response = await apiClient.delete(`/api/teams/${id}`);\n    return response.data;\n  }\n};\n\n// ==================== MATCH SERVICE ====================\nexport const matchService = {\n  // Get matches by tournament\n  getMatchesByTournament: async (tournamentId, params = {}) => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/matches`, {\n      params\n    });\n    return response.data;\n  },\n  // Get match by ID\n  getMatchById: async id => {\n    const response = await apiClient.get(`/api/matches/${id}`);\n    return response.data;\n  },\n  // Create match\n  createMatch: async (tournamentId, matchData) => {\n    const response = await apiClient.post(`/api/tournaments/${tournamentId}/matches`, matchData);\n    return response.data;\n  },\n  // Update match score\n  updateMatchScore: async (id, scoreData) => {\n    const response = await apiClient.put(`/api/matches/${id}/score`, scoreData);\n    return response.data;\n  },\n  // Update match status\n  updateMatchStatus: async (id, statusData) => {\n    const response = await apiClient.put(`/api/matches/${id}/status`, statusData);\n    return response.data;\n  },\n  // Get tournament bracket\n  getTournamentBracket: async tournamentId => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/bracket`);\n    return response.data;\n  }\n};\n\n// ==================== NEWS SERVICE ====================\nexport const newsService = {\n  // Get all news\n  getAllNews: async () => {\n    const response = await apiClient.get('/api/v1/news');\n    return response.data;\n  },\n  // Get news by ID\n  getNewsById: async id => {\n    const response = await apiClient.get(`/api/v1/news/${id}`);\n    return response.data;\n  },\n  // Create news\n  createNews: async newsData => {\n    const response = await apiClient.post('/api/v1/news', newsData);\n    return response.data;\n  },\n  // Update news\n  updateNews: async (id, newsData) => {\n    const response = await apiClient.put(`/api/v1/news/${id}`, newsData);\n    return response.data;\n  },\n  // Delete news\n  deleteNews: async id => {\n    const response = await apiClient.delete(`/api/v1/news/${id}`);\n    return response.data;\n  },\n  // Upload files for news\n  uploadFiles: async (newsId, files) => {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('files', file);\n    });\n    const response = await apiClient.post(`/api/v1/news/uploads/${newsId}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Get image\n  getImage: async imageName => {\n    const response = await apiClient.get(`/api/v1/news/image/${imageName}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n};\n\n// ==================== USER MANAGEMENT SERVICE ====================\n// Note: Backend doesn't have dedicated admin/user management endpoints\n// These would need to be implemented in backend\nexport const userService = {\n  // Get current user profile (using auth account endpoint)\n  getCurrentUser: async () => {\n    return authService.getAccount();\n  }\n\n  // Note: The following endpoints need to be implemented in backend\n  // getAllUsers: async (params = {}) => { /* Backend needs implementation */ },\n  // updateUser: async (userId, userData) => { /* Backend needs implementation */ },\n  // deleteUser: async (userId) => { /* Backend needs implementation */ },\n  // getUserById: async (userId) => { /* Backend needs implementation */ },\n};\n\n// ==================== SYSTEM/ADMIN SERVICE ====================\n// Note: Backend doesn't have system/admin endpoints\n// These would need to be implemented in backend\nexport const systemService = {\n  // Note: The following endpoints need to be implemented in backend\n  // getSystemStats: async () => { /* Backend needs implementation */ },\n  // getSystemHealth: async () => { /* Backend needs implementation */ },\n  // getApplicationLogs: async (params = {}) => { /* Backend needs implementation */ },\n};\n\n// ==================== DEBUG SERVICE ====================\n// Note: Backend has DebugController but endpoints are not documented\nexport const debugService = {\n  // Note: Check backend DebugController for available endpoints\n  // Backend implementation needed for proper debug endpoints\n};\n\n// ==================== USER MANAGEMENT SERVICE ====================\nexport { userManagementService, adminUserService, userProfileService, passwordResetService, roleManagementService };\n\n// ==================== EXPORT ALL SERVICES ====================\nexport const apiServices = {\n  auth: authService,\n  tournament: tournamentService,\n  tournamentKnockout: tournamentKnockoutService,\n  team: teamService,\n  match: matchService,\n  news: newsService,\n  user: userService,\n  userManagement: userManagementService,\n  adminUser: adminUserService,\n  userProfile: userProfileService,\n  passwordReset: passwordResetService,\n  roleManagement: roleManagementService,\n  system: systemService,\n  debug: debugService\n};\n\n// For backward compatibility\nexport const adminService = systemService;\nexport default apiServices;","map":{"version":3,"names":["apiClient","userManagementService","adminUserService","userProfileService","passwordResetService","roleManagementService","authService","register","userData","response","post","data","login","credentials","getAccount","get","logout","refreshToken","tournamentService","getAllTournaments","params","console","log","_response$data","_response$data2","pagination","currentPage","page","totalPages","Math","ceil","length","limit","totalItems","hasNext","hasPrev","error","getTournamentById","id","createTournament","tournamentData","_error$response","_error$response2","status","message","updateTournament","put","deleteTournament","delete","startTournament","tournamentKnockoutService","generateBracket","tournamentId","bracketData","startKnockout","advanceRound","completeTournament","teamService","getTeamsByTournament","getTeamById","registerTeam","teamData","localStorage","getItem","_error$response3","_error$response4","_error$response5","headers","config","updateTeam","deleteTeam","matchService","getMatchesByTournament","getMatchById","createMatch","matchData","updateMatchScore","scoreData","updateMatchStatus","statusData","getTournamentBracket","newsService","getAllNews","getNewsById","createNews","newsData","updateNews","deleteNews","uploadFiles","newsId","files","formData","FormData","forEach","file","append","getImage","imageName","responseType","userService","getCurrentUser","systemService","debugService","apiServices","auth","tournament","tournamentKnockout","team","match","news","user","userManagement","adminUser","userProfile","passwordReset","roleManagement","system","debug","adminService"],"sources":["C:/Users/ACER/Desktop/fe/fe-edu/src/services/index.js"],"sourcesContent":["import apiClient from './api';\nimport { \n  userManagementService, \n  adminUserService, \n  userProfileService, \n  passwordResetService, \n  roleManagementService \n} from './userManagement';\n\n// ==================== AUTH SERVICE ====================\nexport const authService = {\n  // Register new user\n  register: async (userData) => {\n    const response = await apiClient.post('/api/v1/auth/register', userData);\n    return response.data;\n  },\n\n  // Login user\n  login: async (credentials) => {\n    const response = await apiClient.post('/api/v1/auth/login', credentials);\n    return response.data;\n  },\n\n  // Get current user account\n  getAccount: async () => {\n    const response = await apiClient.get('/api/v1/auth/account');\n    return response.data;\n  },\n\n  // Logout user\n  logout: async () => {\n    const response = await apiClient.post('/api/v1/auth/logout');\n    return response.data;\n  },\n\n  // Refresh token\n  refreshToken: async () => {\n    const response = await apiClient.post('/api/v1/auth/refresh');\n    return response.data;\n  },\n};\n\n// ==================== TOURNAMENT SERVICE ====================\nexport const tournamentService = {\n  // Get all tournaments\n  getAllTournaments: async (params = {}) => {\n    console.log('🏟️ [TournamentService] Getting all tournaments with params:', params);\n    try {\n      const response = await apiClient.get('/api/tournaments', { params });\n      console.log('✅ [TournamentService] Get all tournaments success:', response);\n      \n      // Backend returns PaginatedResponseDTO format\n      // Transform to expected frontend format\n      if (response && response.data) {\n        return {\n          data: response.data,\n          pagination: response.pagination || {\n            currentPage: params.page || 1,\n            totalPages: Math.ceil((response.data?.length || 0) / (params.limit || 10)),\n            totalItems: response.data?.length || 0,\n            hasNext: false,\n            hasPrev: false\n          }\n        };\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentService] Get all tournaments failed:', error);\n      throw error;\n    }\n  },\n\n  // Get tournament by ID\n  getTournamentById: async (id) => {\n    console.log('🏟️ [TournamentService] Getting tournament by ID:', id);\n    try {\n      const response = await apiClient.get(`/api/tournaments/${id}`);\n      console.log('✅ [TournamentService] Get tournament by ID success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentService] Get tournament by ID failed:', error);\n      throw error;\n    }\n  },\n\n  // Create tournament\n  createTournament: async (tournamentData) => {\n    console.log('🏟️ [TournamentService] Creating tournament with data:', tournamentData);\n    try {\n      const response = await apiClient.post('/api/tournaments', tournamentData);\n      console.log('✅ [TournamentService] Create tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentService] Create tournament failed:', error);\n      console.error('Error details:', {\n        status: error.response?.status,\n        data: error.response?.data,\n        message: error.message\n      });\n      throw error;\n    }\n  },\n\n  // Update tournament\n  updateTournament: async (id, tournamentData) => {\n    console.log('🏟️ [TournamentService] Updating tournament:', id, tournamentData);\n    try {\n      const response = await apiClient.put(`/api/tournaments/${id}`, tournamentData);\n      console.log('✅ [TournamentService] Update tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentService] Update tournament failed:', error);\n      throw error;\n    }\n  },\n\n  // Delete tournament\n  deleteTournament: async (id) => {\n    console.log('🏟️ [TournamentService] Deleting tournament:', id);\n    try {\n      const response = await apiClient.delete(`/api/tournaments/${id}`);\n      console.log('✅ [TournamentService] Delete tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentService] Delete tournament failed:', error);\n      throw error;\n    }\n  },\n\n  // Start tournament\n  startTournament: async (id) => {\n    console.log('🏟️ [TournamentService] Starting tournament:', id);\n    try {\n      const response = await apiClient.post(`/api/tournaments/${id}/start`);\n      console.log('✅ [TournamentService] Start tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentService] Start tournament failed:', error);\n      throw error;\n    }\n  },\n};\n\n// ==================== TOURNAMENT KNOCKOUT SERVICE ====================\nexport const tournamentKnockoutService = {\n  // Generate tournament bracket\n  generateBracket: async (tournamentId, bracketData) => {\n    console.log('🎯 [TournamentKnockout] Generating bracket for tournament:', tournamentId);\n    console.log('Data:', bracketData);\n    try {\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/generate-bracket`, bracketData);\n      console.log('✅ [TournamentKnockout] Generate bracket success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentKnockout] Generate bracket failed:', error);\n      throw error;\n    }\n  },\n\n  // Start knockout tournament\n  startKnockout: async (tournamentId) => {\n    console.log('🚀 [TournamentKnockout] Starting knockout tournament:', tournamentId);\n    try {\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/start-knockout`);\n      console.log('✅ [TournamentKnockout] Start knockout success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentKnockout] Start knockout failed:', error);\n      throw error;\n    }\n  },\n\n  // Advance to next round\n  advanceRound: async (tournamentId) => {\n    console.log('⏭️ [TournamentKnockout] Advancing round for tournament:', tournamentId);\n    try {\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/advance-round`);\n      console.log('✅ [TournamentKnockout] Advance round success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentKnockout] Advance round failed:', error);\n      throw error;\n    }\n  },\n\n  // Complete tournament\n  completeTournament: async (tournamentId) => {\n    console.log('🏆 [TournamentKnockout] Completing tournament:', tournamentId);\n    try {\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/complete`);\n      console.log('✅ [TournamentKnockout] Complete tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TournamentKnockout] Complete tournament failed:', error);\n      throw error;\n    }\n  },\n};\n\n// ==================== TEAM SERVICE ====================\nexport const teamService = {\n  // Get teams by tournament\n  getTeamsByTournament: async (tournamentId) => {\n    console.log('👥 [TeamService] Getting teams by tournament ID:', tournamentId);\n    try {\n      const response = await apiClient.get(`/api/tournaments/${tournamentId}/teams`);\n      console.log('✅ [TeamService] Get teams by tournament success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TeamService] Get teams by tournament failed:', error);\n      throw error;\n    }\n  },\n\n  // Get team by ID\n  getTeamById: async (id) => {\n    const response = await apiClient.get(`/api/teams/${id}`);\n    return response.data;\n  },\n\n  // Register team for tournament\n  registerTeam: async (tournamentId, teamData) => {\n    console.log('🚀 [TeamService] Register team request:');\n    console.log('  Tournament ID:', tournamentId);\n    console.log('  Team Data:', teamData);\n    console.log('  Full URL:', `/api/tournaments/${tournamentId}/register`);\n    console.log('  Token:', localStorage.getItem('accessToken') ? 'Present' : 'Missing');\n    \n    try {\n      const response = await apiClient.post(`/api/tournaments/${tournamentId}/register`, teamData);\n      console.log('✅ [TeamService] Register team success:', response);\n      return response;\n    } catch (error) {\n      console.error('❌ [TeamService] Register team failed:');\n      console.error('  Status:', error.response?.status);\n      console.error('  Data:', error.response?.data);\n      console.error('  Headers:', error.response?.headers);\n      console.error('  Request config:', error.config);\n      throw error;\n    }\n  },\n\n  // Update team\n  updateTeam: async (id, teamData) => {\n    const response = await apiClient.put(`/api/teams/${id}`, teamData);\n    return response.data;\n  },\n\n  // Delete team\n  deleteTeam: async (id) => {\n    const response = await apiClient.delete(`/api/teams/${id}`);\n    return response.data;\n  },\n};\n\n// ==================== MATCH SERVICE ====================\nexport const matchService = {\n  // Get matches by tournament\n  getMatchesByTournament: async (tournamentId, params = {}) => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/matches`, { params });\n    return response.data;\n  },\n\n  // Get match by ID\n  getMatchById: async (id) => {\n    const response = await apiClient.get(`/api/matches/${id}`);\n    return response.data;\n  },\n\n  // Create match\n  createMatch: async (tournamentId, matchData) => {\n    const response = await apiClient.post(`/api/tournaments/${tournamentId}/matches`, matchData);\n    return response.data;\n  },\n\n  // Update match score\n  updateMatchScore: async (id, scoreData) => {\n    const response = await apiClient.put(`/api/matches/${id}/score`, scoreData);\n    return response.data;\n  },\n\n  // Update match status\n  updateMatchStatus: async (id, statusData) => {\n    const response = await apiClient.put(`/api/matches/${id}/status`, statusData);\n    return response.data;\n  },\n\n  // Get tournament bracket\n  getTournamentBracket: async (tournamentId) => {\n    const response = await apiClient.get(`/api/tournaments/${tournamentId}/bracket`);\n    return response.data;\n  },\n};\n\n// ==================== NEWS SERVICE ====================\nexport const newsService = {\n  // Get all news\n  getAllNews: async () => {\n    const response = await apiClient.get('/api/v1/news');\n    return response.data;\n  },\n\n  // Get news by ID\n  getNewsById: async (id) => {\n    const response = await apiClient.get(`/api/v1/news/${id}`);\n    return response.data;\n  },\n\n  // Create news\n  createNews: async (newsData) => {\n    const response = await apiClient.post('/api/v1/news', newsData);\n    return response.data;\n  },\n\n  // Update news\n  updateNews: async (id, newsData) => {\n    const response = await apiClient.put(`/api/v1/news/${id}`, newsData);\n    return response.data;\n  },\n\n  // Delete news\n  deleteNews: async (id) => {\n    const response = await apiClient.delete(`/api/v1/news/${id}`);\n    return response.data;\n  },\n\n  // Upload files for news\n  uploadFiles: async (newsId, files) => {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('files', file);\n    });\n    \n    const response = await apiClient.post(`/api/v1/news/uploads/${newsId}`, formData, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    });\n    return response.data;\n  },\n\n  // Get image\n  getImage: async (imageName) => {\n    const response = await apiClient.get(`/api/v1/news/image/${imageName}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n};\n\n// ==================== USER MANAGEMENT SERVICE ====================\n// Note: Backend doesn't have dedicated admin/user management endpoints\n// These would need to be implemented in backend\nexport const userService = {\n  // Get current user profile (using auth account endpoint)\n  getCurrentUser: async () => {\n    return authService.getAccount();\n  },\n\n  // Note: The following endpoints need to be implemented in backend\n  // getAllUsers: async (params = {}) => { /* Backend needs implementation */ },\n  // updateUser: async (userId, userData) => { /* Backend needs implementation */ },\n  // deleteUser: async (userId) => { /* Backend needs implementation */ },\n  // getUserById: async (userId) => { /* Backend needs implementation */ },\n};\n\n// ==================== SYSTEM/ADMIN SERVICE ====================\n// Note: Backend doesn't have system/admin endpoints\n// These would need to be implemented in backend\nexport const systemService = {\n  // Note: The following endpoints need to be implemented in backend\n  // getSystemStats: async () => { /* Backend needs implementation */ },\n  // getSystemHealth: async () => { /* Backend needs implementation */ },\n  // getApplicationLogs: async (params = {}) => { /* Backend needs implementation */ },\n};\n\n// ==================== DEBUG SERVICE ====================\n// Note: Backend has DebugController but endpoints are not documented\nexport const debugService = {\n  // Note: Check backend DebugController for available endpoints\n  // Backend implementation needed for proper debug endpoints\n};\n\n// ==================== USER MANAGEMENT SERVICE ====================\nexport { \n  userManagementService,\n  adminUserService,\n  userProfileService, \n  passwordResetService,\n  roleManagementService\n};\n\n// ==================== EXPORT ALL SERVICES ====================\nexport const apiServices = {\n  auth: authService,\n  tournament: tournamentService,\n  tournamentKnockout: tournamentKnockoutService,\n  team: teamService,\n  match: matchService,\n  news: newsService,\n  user: userService,\n  userManagement: userManagementService,\n  adminUser: adminUserService,\n  userProfile: userProfileService,\n  passwordReset: passwordResetService,\n  roleManagement: roleManagementService,\n  system: systemService,\n  debug: debugService,\n};\n\n// For backward compatibility\nexport const adminService = systemService;\n\nexport default apiServices;\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,OAAO;AAC7B,SACEC,qBAAqB,EACrBC,gBAAgB,EAChBC,kBAAkB,EAClBC,oBAAoB,EACpBC,qBAAqB,QAChB,kBAAkB;;AAEzB;AACA,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,MAAMC,QAAQ,GAAG,MAAMT,SAAS,CAACU,IAAI,CAAC,uBAAuB,EAAEF,QAAQ,CAAC;IACxE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAC,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5B,MAAMJ,QAAQ,GAAG,MAAMT,SAAS,CAACU,IAAI,CAAC,oBAAoB,EAAEG,WAAW,CAAC;IACxE,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAG,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,MAAML,QAAQ,GAAG,MAAMT,SAAS,CAACe,GAAG,CAAC,sBAAsB,CAAC;IAC5D,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAK,MAAM,EAAE,MAAAA,CAAA,KAAY;IAClB,MAAMP,QAAQ,GAAG,MAAMT,SAAS,CAACU,IAAI,CAAC,qBAAqB,CAAC;IAC5D,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAM,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,MAAMR,QAAQ,GAAG,MAAMT,SAAS,CAACU,IAAI,CAAC,sBAAsB,CAAC;IAC7D,OAAOD,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMO,iBAAiB,GAAG;EAC/B;EACAC,iBAAiB,EAAE,MAAAA,CAAOC,MAAM,GAAG,CAAC,CAAC,KAAK;IACxCC,OAAO,CAACC,GAAG,CAAC,8DAA8D,EAAEF,MAAM,CAAC;IACnF,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMT,SAAS,CAACe,GAAG,CAAC,kBAAkB,EAAE;QAAEK;MAAO,CAAC,CAAC;MACpEC,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEb,QAAQ,CAAC;;MAE3E;MACA;MACA,IAAIA,QAAQ,IAAIA,QAAQ,CAACE,IAAI,EAAE;QAAA,IAAAY,cAAA,EAAAC,eAAA;QAC7B,OAAO;UACLb,IAAI,EAAEF,QAAQ,CAACE,IAAI;UACnBc,UAAU,EAAEhB,QAAQ,CAACgB,UAAU,IAAI;YACjCC,WAAW,EAAEN,MAAM,CAACO,IAAI,IAAI,CAAC;YAC7BC,UAAU,EAAEC,IAAI,CAACC,IAAI,CAAC,CAAC,EAAAP,cAAA,GAAAd,QAAQ,CAACE,IAAI,cAAAY,cAAA,uBAAbA,cAAA,CAAeQ,MAAM,KAAI,CAAC,KAAKX,MAAM,CAACY,KAAK,IAAI,EAAE,CAAC,CAAC;YAC1EC,UAAU,EAAE,EAAAT,eAAA,GAAAf,QAAQ,CAACE,IAAI,cAAAa,eAAA,uBAAbA,eAAA,CAAeO,MAAM,KAAI,CAAC;YACtCG,OAAO,EAAE,KAAK;YACdC,OAAO,EAAE;UACX;QACF,CAAC;MACH;MAEA,OAAO1B,QAAQ;IACjB,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,mDAAmD,EAAEA,KAAK,CAAC;MACzE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAC,iBAAiB,EAAE,MAAOC,EAAE,IAAK;IAC/BjB,OAAO,CAACC,GAAG,CAAC,mDAAmD,EAAEgB,EAAE,CAAC;IACpE,IAAI;MACF,MAAM7B,QAAQ,GAAG,MAAMT,SAAS,CAACe,GAAG,CAAC,oBAAoBuB,EAAE,EAAE,CAAC;MAC9DjB,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAEb,QAAQ,CAAC;MAC5E,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,oDAAoD,EAAEA,KAAK,CAAC;MAC1E,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAG,gBAAgB,EAAE,MAAOC,cAAc,IAAK;IAC1CnB,OAAO,CAACC,GAAG,CAAC,wDAAwD,EAAEkB,cAAc,CAAC;IACrF,IAAI;MACF,MAAM/B,QAAQ,GAAG,MAAMT,SAAS,CAACU,IAAI,CAAC,kBAAkB,EAAE8B,cAAc,CAAC;MACzEnB,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEb,QAAQ,CAAC;MACzE,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAO2B,KAAK,EAAE;MAAA,IAAAK,eAAA,EAAAC,gBAAA;MACdrB,OAAO,CAACe,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MACvEf,OAAO,CAACe,KAAK,CAAC,gBAAgB,EAAE;QAC9BO,MAAM,GAAAF,eAAA,GAAEL,KAAK,CAAC3B,QAAQ,cAAAgC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM;QAC9BhC,IAAI,GAAA+B,gBAAA,GAAEN,KAAK,CAAC3B,QAAQ,cAAAiC,gBAAA,uBAAdA,gBAAA,CAAgB/B,IAAI;QAC1BiC,OAAO,EAAER,KAAK,CAACQ;MACjB,CAAC,CAAC;MACF,MAAMR,KAAK;IACb;EACF,CAAC;EAED;EACAS,gBAAgB,EAAE,MAAAA,CAAOP,EAAE,EAAEE,cAAc,KAAK;IAC9CnB,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEgB,EAAE,EAAEE,cAAc,CAAC;IAC/E,IAAI;MACF,MAAM/B,QAAQ,GAAG,MAAMT,SAAS,CAAC8C,GAAG,CAAC,oBAAoBR,EAAE,EAAE,EAAEE,cAAc,CAAC;MAC9EnB,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEb,QAAQ,CAAC;MACzE,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MACvE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAW,gBAAgB,EAAE,MAAOT,EAAE,IAAK;IAC9BjB,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEgB,EAAE,CAAC;IAC/D,IAAI;MACF,MAAM7B,QAAQ,GAAG,MAAMT,SAAS,CAACgD,MAAM,CAAC,oBAAoBV,EAAE,EAAE,CAAC;MACjEjB,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEb,QAAQ,CAAC;MACzE,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MACvE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAa,eAAe,EAAE,MAAOX,EAAE,IAAK;IAC7BjB,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEgB,EAAE,CAAC;IAC/D,IAAI;MACF,MAAM7B,QAAQ,GAAG,MAAMT,SAAS,CAACU,IAAI,CAAC,oBAAoB4B,EAAE,QAAQ,CAAC;MACrEjB,OAAO,CAACC,GAAG,CAAC,iDAAiD,EAAEb,QAAQ,CAAC;MACxE,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;MACtE,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMc,yBAAyB,GAAG;EACvC;EACAC,eAAe,EAAE,MAAAA,CAAOC,YAAY,EAAEC,WAAW,KAAK;IACpDhC,OAAO,CAACC,GAAG,CAAC,4DAA4D,EAAE8B,YAAY,CAAC;IACvF/B,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE+B,WAAW,CAAC;IACjC,IAAI;MACF,MAAM5C,QAAQ,GAAG,MAAMT,SAAS,CAACU,IAAI,CAAC,oBAAoB0C,YAAY,mBAAmB,EAAEC,WAAW,CAAC;MACvGhC,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEb,QAAQ,CAAC;MACzE,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MACvE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAkB,aAAa,EAAE,MAAOF,YAAY,IAAK;IACrC/B,OAAO,CAACC,GAAG,CAAC,uDAAuD,EAAE8B,YAAY,CAAC;IAClF,IAAI;MACF,MAAM3C,QAAQ,GAAG,MAAMT,SAAS,CAACU,IAAI,CAAC,oBAAoB0C,YAAY,iBAAiB,CAAC;MACxF/B,OAAO,CAACC,GAAG,CAAC,gDAAgD,EAAEb,QAAQ,CAAC;MACvE,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACrE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAmB,YAAY,EAAE,MAAOH,YAAY,IAAK;IACpC/B,OAAO,CAACC,GAAG,CAAC,yDAAyD,EAAE8B,YAAY,CAAC;IACpF,IAAI;MACF,MAAM3C,QAAQ,GAAG,MAAMT,SAAS,CAACU,IAAI,CAAC,oBAAoB0C,YAAY,gBAAgB,CAAC;MACvF/B,OAAO,CAACC,GAAG,CAAC,+CAA+C,EAAEb,QAAQ,CAAC;MACtE,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;MACpE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAoB,kBAAkB,EAAE,MAAOJ,YAAY,IAAK;IAC1C/B,OAAO,CAACC,GAAG,CAAC,gDAAgD,EAAE8B,YAAY,CAAC;IAC3E,IAAI;MACF,MAAM3C,QAAQ,GAAG,MAAMT,SAAS,CAACU,IAAI,CAAC,oBAAoB0C,YAAY,WAAW,CAAC;MAClF/B,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAEb,QAAQ,CAAC;MAC5E,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,oDAAoD,EAAEA,KAAK,CAAC;MAC1E,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMqB,WAAW,GAAG;EACzB;EACAC,oBAAoB,EAAE,MAAON,YAAY,IAAK;IAC5C/B,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAE8B,YAAY,CAAC;IAC7E,IAAI;MACF,MAAM3C,QAAQ,GAAG,MAAMT,SAAS,CAACe,GAAG,CAAC,oBAAoBqC,YAAY,QAAQ,CAAC;MAC9E/B,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEb,QAAQ,CAAC;MACzE,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MACvE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAuB,WAAW,EAAE,MAAOrB,EAAE,IAAK;IACzB,MAAM7B,QAAQ,GAAG,MAAMT,SAAS,CAACe,GAAG,CAAC,cAAcuB,EAAE,EAAE,CAAC;IACxD,OAAO7B,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAiD,YAAY,EAAE,MAAAA,CAAOR,YAAY,EAAES,QAAQ,KAAK;IAC9CxC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtDD,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE8B,YAAY,CAAC;IAC7C/B,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEuC,QAAQ,CAAC;IACrCxC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,oBAAoB8B,YAAY,WAAW,CAAC;IACvE/B,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEwC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,GAAG,SAAS,GAAG,SAAS,CAAC;IAEpF,IAAI;MACF,MAAMtD,QAAQ,GAAG,MAAMT,SAAS,CAACU,IAAI,CAAC,oBAAoB0C,YAAY,WAAW,EAAES,QAAQ,CAAC;MAC5FxC,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEb,QAAQ,CAAC;MAC/D,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAO2B,KAAK,EAAE;MAAA,IAAA4B,gBAAA,EAAAC,gBAAA,EAAAC,gBAAA;MACd7C,OAAO,CAACe,KAAK,CAAC,uCAAuC,CAAC;MACtDf,OAAO,CAACe,KAAK,CAAC,WAAW,GAAA4B,gBAAA,GAAE5B,KAAK,CAAC3B,QAAQ,cAAAuD,gBAAA,uBAAdA,gBAAA,CAAgBrB,MAAM,CAAC;MAClDtB,OAAO,CAACe,KAAK,CAAC,SAAS,GAAA6B,gBAAA,GAAE7B,KAAK,CAAC3B,QAAQ,cAAAwD,gBAAA,uBAAdA,gBAAA,CAAgBtD,IAAI,CAAC;MAC9CU,OAAO,CAACe,KAAK,CAAC,YAAY,GAAA8B,gBAAA,GAAE9B,KAAK,CAAC3B,QAAQ,cAAAyD,gBAAA,uBAAdA,gBAAA,CAAgBC,OAAO,CAAC;MACpD9C,OAAO,CAACe,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACgC,MAAM,CAAC;MAChD,MAAMhC,KAAK;IACb;EACF,CAAC;EAED;EACAiC,UAAU,EAAE,MAAAA,CAAO/B,EAAE,EAAEuB,QAAQ,KAAK;IAClC,MAAMpD,QAAQ,GAAG,MAAMT,SAAS,CAAC8C,GAAG,CAAC,cAAcR,EAAE,EAAE,EAAEuB,QAAQ,CAAC;IAClE,OAAOpD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA2D,UAAU,EAAE,MAAOhC,EAAE,IAAK;IACxB,MAAM7B,QAAQ,GAAG,MAAMT,SAAS,CAACgD,MAAM,CAAC,cAAcV,EAAE,EAAE,CAAC;IAC3D,OAAO7B,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAM4D,YAAY,GAAG;EAC1B;EACAC,sBAAsB,EAAE,MAAAA,CAAOpB,YAAY,EAAEhC,MAAM,GAAG,CAAC,CAAC,KAAK;IAC3D,MAAMX,QAAQ,GAAG,MAAMT,SAAS,CAACe,GAAG,CAAC,oBAAoBqC,YAAY,UAAU,EAAE;MAAEhC;IAAO,CAAC,CAAC;IAC5F,OAAOX,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA8D,YAAY,EAAE,MAAOnC,EAAE,IAAK;IAC1B,MAAM7B,QAAQ,GAAG,MAAMT,SAAS,CAACe,GAAG,CAAC,gBAAgBuB,EAAE,EAAE,CAAC;IAC1D,OAAO7B,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA+D,WAAW,EAAE,MAAAA,CAAOtB,YAAY,EAAEuB,SAAS,KAAK;IAC9C,MAAMlE,QAAQ,GAAG,MAAMT,SAAS,CAACU,IAAI,CAAC,oBAAoB0C,YAAY,UAAU,EAAEuB,SAAS,CAAC;IAC5F,OAAOlE,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAiE,gBAAgB,EAAE,MAAAA,CAAOtC,EAAE,EAAEuC,SAAS,KAAK;IACzC,MAAMpE,QAAQ,GAAG,MAAMT,SAAS,CAAC8C,GAAG,CAAC,gBAAgBR,EAAE,QAAQ,EAAEuC,SAAS,CAAC;IAC3E,OAAOpE,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAmE,iBAAiB,EAAE,MAAAA,CAAOxC,EAAE,EAAEyC,UAAU,KAAK;IAC3C,MAAMtE,QAAQ,GAAG,MAAMT,SAAS,CAAC8C,GAAG,CAAC,gBAAgBR,EAAE,SAAS,EAAEyC,UAAU,CAAC;IAC7E,OAAOtE,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAqE,oBAAoB,EAAE,MAAO5B,YAAY,IAAK;IAC5C,MAAM3C,QAAQ,GAAG,MAAMT,SAAS,CAACe,GAAG,CAAC,oBAAoBqC,YAAY,UAAU,CAAC;IAChF,OAAO3C,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMsE,WAAW,GAAG;EACzB;EACAC,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,MAAMzE,QAAQ,GAAG,MAAMT,SAAS,CAACe,GAAG,CAAC,cAAc,CAAC;IACpD,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAwE,WAAW,EAAE,MAAO7C,EAAE,IAAK;IACzB,MAAM7B,QAAQ,GAAG,MAAMT,SAAS,CAACe,GAAG,CAAC,gBAAgBuB,EAAE,EAAE,CAAC;IAC1D,OAAO7B,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAyE,UAAU,EAAE,MAAOC,QAAQ,IAAK;IAC9B,MAAM5E,QAAQ,GAAG,MAAMT,SAAS,CAACU,IAAI,CAAC,cAAc,EAAE2E,QAAQ,CAAC;IAC/D,OAAO5E,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA2E,UAAU,EAAE,MAAAA,CAAOhD,EAAE,EAAE+C,QAAQ,KAAK;IAClC,MAAM5E,QAAQ,GAAG,MAAMT,SAAS,CAAC8C,GAAG,CAAC,gBAAgBR,EAAE,EAAE,EAAE+C,QAAQ,CAAC;IACpE,OAAO5E,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA4E,UAAU,EAAE,MAAOjD,EAAE,IAAK;IACxB,MAAM7B,QAAQ,GAAG,MAAMT,SAAS,CAACgD,MAAM,CAAC,gBAAgBV,EAAE,EAAE,CAAC;IAC7D,OAAO7B,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA6E,WAAW,EAAE,MAAAA,CAAOC,MAAM,EAAEC,KAAK,KAAK;IACpC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BF,KAAK,CAACG,OAAO,CAACC,IAAI,IAAI;MACpBH,QAAQ,CAACI,MAAM,CAAC,OAAO,EAAED,IAAI,CAAC;IAChC,CAAC,CAAC;IAEF,MAAMrF,QAAQ,GAAG,MAAMT,SAAS,CAACU,IAAI,CAAC,wBAAwB+E,MAAM,EAAE,EAAEE,QAAQ,EAAE;MAChFxB,OAAO,EAAE;QAAE,cAAc,EAAE;MAAsB;IACnD,CAAC,CAAC;IACF,OAAO1D,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAqF,QAAQ,EAAE,MAAOC,SAAS,IAAK;IAC7B,MAAMxF,QAAQ,GAAG,MAAMT,SAAS,CAACe,GAAG,CAAC,sBAAsBkF,SAAS,EAAE,EAAE;MACtEC,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAOzF,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMwF,WAAW,GAAG;EACzB;EACAC,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,OAAO9F,WAAW,CAACQ,UAAU,CAAC,CAAC;EACjC;;EAEA;EACA;EACA;EACA;EACA;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMuF,aAAa,GAAG;EAC3B;EACA;EACA;EACA;AAAA,CACD;;AAED;AACA;AACA,OAAO,MAAMC,YAAY,GAAG;EAC1B;EACA;AAAA,CACD;;AAED;AACA,SACErG,qBAAqB,EACrBC,gBAAgB,EAChBC,kBAAkB,EAClBC,oBAAoB,EACpBC,qBAAqB;;AAGvB;AACA,OAAO,MAAMkG,WAAW,GAAG;EACzBC,IAAI,EAAElG,WAAW;EACjBmG,UAAU,EAAEvF,iBAAiB;EAC7BwF,kBAAkB,EAAExD,yBAAyB;EAC7CyD,IAAI,EAAElD,WAAW;EACjBmD,KAAK,EAAErC,YAAY;EACnBsC,IAAI,EAAE5B,WAAW;EACjB6B,IAAI,EAAEX,WAAW;EACjBY,cAAc,EAAE9G,qBAAqB;EACrC+G,SAAS,EAAE9G,gBAAgB;EAC3B+G,WAAW,EAAE9G,kBAAkB;EAC/B+G,aAAa,EAAE9G,oBAAoB;EACnC+G,cAAc,EAAE9G,qBAAqB;EACrC+G,MAAM,EAAEf,aAAa;EACrBgB,KAAK,EAAEf;AACT,CAAC;;AAED;AACA,OAAO,MAAMgB,YAAY,GAAGjB,aAAa;AAEzC,eAAeE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}