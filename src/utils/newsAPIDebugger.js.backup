// News API Debug Helper
// S·ª≠ d·ª•ng file n√†y ƒë·ªÉ ki·ªÉm tra v√† debug c√°c v·∫•n ƒë·ªÅ v·ªõi News API

import newsService from '../services/newsService';

const NewsAPIDebugger = {
  // Test k·∫øt n·ªëi v·ªõi News API
  async testNewsAPI() {
    console.log('üîß [NEWS DEBUG] Testing News API connection...');
    
    try {
      // Test getAllNews
      console.log('üì∞ [NEWS DEBUG] Testing getAllNews...');
      const allNews = await newsService.getAllNews();
      console.log('‚úÖ [NEWS DEBUG] getAllNews response:', JSON.stringify(allNews, null, 2));
      console.log('‚úÖ [NEWS DEBUG] Data type:', typeof allNews);
      console.log('‚úÖ [NEWS DEBUG] Is array:', Array.isArray(allNews));
      
      if (Array.isArray(allNews)) {
        if (allNews.length > 0) {
          console.log('‚úÖ [NEWS DEBUG] Found', allNews.length, 'news items');
          console.log('‚úÖ [NEWS DEBUG] Sample news item:', JSON.stringify(allNews[0], null, 2));
          console.log('‚úÖ [NEWS DEBUG] Available fields:', Object.keys(allNews[0]));
          
          // Test getNewsById v·ªõi item ƒë·∫ßu ti√™n
          const firstNewsId = allNews[0].id;
          if (firstNewsId) {
            console.log('üìñ [NEWS DEBUG] Testing getNewsById with ID:', firstNewsId);
            try {
              const singleNews = await newsService.getNewsById(firstNewsId);
              console.log('‚úÖ [NEWS DEBUG] getNewsById response:', JSON.stringify(singleNews, null, 2));
            } catch (getByIdError) {
              console.warn('‚ö†Ô∏è [NEWS DEBUG] getNewsById failed:', getByIdError.message);
            }
          } else {
            console.warn('‚ö†Ô∏è [NEWS DEBUG] First news item has no ID field');
          }
        } else {
          console.log('‚ö†Ô∏è [NEWS DEBUG] News array is empty - no existing news articles');
        }
        return true;
      } else {
        console.error('‚ùå [NEWS DEBUG] API returned non-array data:', JSON.stringify(allNews, null, 2));
        return false;
      }
    } catch (error) {
      console.error('‚ùå [NEWS DEBUG] API Error:', JSON.stringify({
        message: error.message,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data
      }, null, 2));
      return false;
    }
  },

  // Test t·∫°o tin t·ª©c m·ªõi
  async testCreateNews() {
    console.log('üîß [NEWS DEBUG] Testing createNews...');
    
    const testNewsData = {
      name: 'Test News Article - ' + new Date().toISOString(),
      shortDescription: 'This is a test news article created by the debug tool.',
      content: 'This is the full content of the test news article. It contains more detailed information about the test.'
    };
    
    console.log('üìù [NEWS DEBUG] Test data to create:', JSON.stringify(testNewsData, null, 2));
    
    try {
      const result = await newsService.createNews(testNewsData);
      console.log('‚úÖ [NEWS DEBUG] createNews success:', JSON.stringify(result, null, 2));
      
      // Th·ª≠ x√≥a b√†i test n√†y ƒë·ªÉ kh√¥ng l√†m r·ªëi database
      const newsId = result?.id || result?.data?.id;
      if (newsId) {
        console.log('üóëÔ∏è [NEWS DEBUG] Cleaning up test news with ID:', newsId);
        try {
          await newsService.deleteNews(newsId);
          console.log('‚úÖ [NEWS DEBUG] Test news cleaned up successfully');
        } catch (deleteError) {
          console.warn('‚ö†Ô∏è [NEWS DEBUG] Could not clean up test news:', deleteError.message);
        }
      } else {
        console.warn('‚ö†Ô∏è [NEWS DEBUG] No ID found in create response, cannot cleanup');
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå [NEWS DEBUG] createNews Error:', JSON.stringify({
        message: error.message,
        status: error.response?.status,
        data: error.response?.data
      }, null, 2));
      return false;
    }
  },

  // Ki·ªÉm tra c·∫•u tr√∫c response t·ª´ API
  async analyzeAPIResponse() {
    console.log('üîß [NEWS DEBUG] Analyzing API response structure...');
    
    try {
      const response = await newsService.getAllNews();
      
      const analysis = {
        responseType: typeof response,
        isArray: Array.isArray(response),
        length: response?.length || 0,
        hasData: response?.data !== undefined,
        hasItems: response?.items !== undefined,
        structure: null,
        sampleItem: null,
        itemFields: []
      };
      
      if (Array.isArray(response)) {
        analysis.structure = 'Direct Array';
        if (response.length > 0) {
          analysis.sampleItem = response[0];
          analysis.itemFields = Object.keys(response[0]);
          console.log('‚úÖ [NEWS DEBUG] Sample item details:', JSON.stringify(response[0], null, 2));
        }
      } else if (response?.data && Array.isArray(response.data)) {
        analysis.structure = 'Wrapped in data property';
        if (response.data.length > 0) {
          analysis.sampleItem = response.data[0];
          analysis.itemFields = Object.keys(response.data[0] || {});
          console.log('‚úÖ [NEWS DEBUG] Sample item details:', JSON.stringify(response.data[0], null, 2));
        }
      } else if (response?.items && Array.isArray(response.items)) {
        analysis.structure = 'Wrapped in items property';
        if (response.items.length > 0) {
          analysis.sampleItem = response.items[0];
          analysis.itemFields = Object.keys(response.items[0] || {});
          console.log('‚úÖ [NEWS DEBUG] Sample item details:', JSON.stringify(response.items[0], null, 2));
        }
      } else {
        analysis.structure = 'Unknown structure';
        console.log('‚ö†Ô∏è [NEWS DEBUG] Full response details:', JSON.stringify(response, null, 2));
      }
      
      console.log('üìä [NEWS DEBUG] Complete Analysis:', JSON.stringify(analysis, null, 2));
      return analysis;
    } catch (error) {
      console.error('‚ùå [NEWS DEBUG] Analysis Error:', error);
      return null;
    }
  },

  // Ki·ªÉm tra backend c√≥ s·∫µn kh√¥ng
  async checkBackendHealth() {
    console.log('üè• [NEWS DEBUG] Checking backend health...');
    
    try {
      const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8080';
      console.log('üîó [NEWS DEBUG] Testing backend URL:', baseUrl);
      
      // Th·ª≠ g·ªçi ƒë·∫øn health endpoint tr∆∞·ªõc
      try {
        const healthResponse = await fetch(`${baseUrl}/health`, { 
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (healthResponse.ok) {
          const data = await healthResponse.json();
          console.log('‚úÖ [NEWS DEBUG] Backend health check passed:', JSON.stringify(data, null, 2));
          return true;
        }
      } catch (healthError) {
        console.log('‚ö†Ô∏è [NEWS DEBUG] Health endpoint not available, trying alternative...');
      }
      
      // N·∫øu health endpoint kh√¥ng c√≥, th·ª≠ ping basic endpoint
      try {
        const pingResponse = await fetch(`${baseUrl}/api/v1`, { 
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        console.log('üîç [NEWS DEBUG] API ping response status:', pingResponse.status);
        if (pingResponse.status < 500) {
          console.log('‚úÖ [NEWS DEBUG] Backend is reachable (status:', pingResponse.status, ')');
          return true;
        }
      } catch (pingError) {
        console.log('‚ö†Ô∏è [NEWS DEBUG] API endpoint also not reachable');
      }
      
      console.log('‚ùå [NEWS DEBUG] Backend appears to be down');
      return false;
    } catch (error) {
      console.error('‚ùå [NEWS DEBUG] Backend unreachable:', error.message);
      return false;
    }
  },

  // Ch·∫°y t·∫•t c·∫£ tests
  async runAllTests() {
    console.log('üöÄ [NEWS DEBUG] Running all News API tests...');
    
    const results = {
      backendHealth: await this.checkBackendHealth(),
      apiConnection: await this.testNewsAPI(),
      apiAnalysis: await this.analyzeAPIResponse(),
      createNews: await this.testCreateNews()
    };
    
    console.log('üìã [NEWS DEBUG] All tests completed:', JSON.stringify(results, null, 2));
    
    // C·∫£i ti·∫øn logic ƒë√°nh gi√° k·∫øt qu·∫£
    const hasApiConnection = results.apiConnection === true;
    const hasWorkingCreate = results.createNews === true;
    const hasAnalysis = results.apiAnalysis !== null && typeof results.apiAnalysis === 'object';
    
    if (hasApiConnection && hasWorkingCreate && hasAnalysis) {
      console.log('üéâ [NEWS DEBUG] SUCCESS: All core functionality is working! API is fully operational.');
    } else if (hasApiConnection && hasAnalysis) {
      console.log('‚úÖ [NEWS DEBUG] SUCCESS: API connection and data retrieval work. Create functionality may have issues.');
    } else if (hasApiConnection) {
      console.log('‚ö†Ô∏è [NEWS DEBUG] PARTIAL: API connection works but some operations failed.');
    } else {
      console.log('‚ùå [NEWS DEBUG] FAILURE: Core API functionality is not working.');
    }
    
    // C·∫£i ti·∫øn g·ª£i √Ω d·ª±a tr√™n k·∫øt qu·∫£ th·ª±c t·∫ø
    if (!hasApiConnection) {
      console.log('üí° [NEWS DEBUG] SUGGESTION: API connection failed. Check backend server, URL configuration, and authentication.');
    } else if (!hasWorkingCreate) {
      console.log('üí° [NEWS DEBUG] SUGGESTION: Create operation failed. Check permissions, request format, or backend create endpoint.');
    } else if (!hasAnalysis) {
      console.log('üí° [NEWS DEBUG] SUGGESTION: Response analysis failed. API structure may be unexpected.');
    }
    
    return results;
  }
};

export default NewsAPIDebugger;