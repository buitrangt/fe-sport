import React, { useState } from 'react';
import { useQuery } from 'react-query';
import {
  Trophy,
  Users,
  Calendar,
  BarChart3,
  Play,
  CheckCircle,
  Clock, // Gi·ªØ l·∫°i cho Clock icon
  TrendingUp,
  AlertTriangle,
  Plus,
  RefreshCw,
  Eye,
  ArrowRight, // Icon cho n√∫t "View All"
  Timer, // Thay th·∫ø ClockCountdown
  List // Thay th·∫ø ListDashed (n·∫øu c√≥ s·ª≠ d·ª•ng)
} from 'lucide-react'; // ƒê·∫£m b·∫£o t·∫•t c·∫£ icon ƒë∆∞·ª£c import ƒë·ªÅu c√≥ trong th∆∞ vi·ªán

import { tournamentService } from '../../services';
import { formatDate, getStatusColor } from '../../utils/helpers';
import LoadingSpinner from '../LoadingSpinner';

const AdminTournamentDashboard = () => {
  // Kh√¥ng c·∫ßn useQueryClient v√† useMutation n·∫øu kh√¥ng c√≥ ch·ª©c nƒÉng x√≥a tr·ª±c ti·∫øp ·ªü ƒë√¢y
  // const queryClient = useQueryClient();
  // const deleteTournamentMutation = useMutation(...);

  // Kh√¥ng c·∫ßn state cho search/filter n·∫øu kh√¥ng c√≥ b·∫£ng All Tournaments
  // const [searchQuery, setSearchQuery] = useState('');
  // const [statusFilter, setStatusFilter] = useState('all');

  // Fetch tournaments data
  const { data: tournaments, isLoading: tournamentsLoading, refetch: refetchTournaments } = useQuery(
    ['admin-tournaments-dashboard'],
    () => tournamentService.getAllTournaments(),
    { staleTime: 5 * 60 * 1000 }
  );

  // Safe extraction of tournaments data
  let tournamentsList = [];
  try {
    if (Array.isArray(tournaments?.data)) {
      tournamentsList = tournaments.data;
    } else if (Array.isArray(tournaments?.data?.tournaments)) {
      tournamentsList = tournaments.data.tournaments;
    } else if (Array.isArray(tournaments)) {
      tournamentsList = tournaments;
    } else {
      console.log('‚ö†Ô∏è [AdminTournamentDashboard] Unexpected tournaments data structure:', tournaments);
      tournamentsList = [];
    }
  } catch (err) {
    console.error('üö® [AdminTournamentDashboard] Error processing tournaments data:', err);
    tournamentsList = [];
  }

  // Calculate dashboard statistics with safe operations
  const stats = {
    total: Array.isArray(tournamentsList) ? tournamentsList.length : 0,
    ongoing: Array.isArray(tournamentsList) ? tournamentsList.filter(t => t?.status === 'ONGOING').length : 0,
    registration: Array.isArray(tournamentsList) ? tournamentsList.filter(t => t?.status === 'REGISTRATION').length : 0,
    ready: Array.isArray(tournamentsList) ? tournamentsList.filter(t => t?.status === 'READY').length : 0,
    completed: Array.isArray(tournamentsList) ? tournamentsList.filter(t => t?.status === 'COMPLETED').length : 0,
    totalTeams: Array.isArray(tournamentsList) ? tournamentsList.reduce((acc, t) => acc + (t?.currentTeams || 0), 0) : 0,
    avgTeamsPerTournament: Array.isArray(tournamentsList) && tournamentsList.length > 0 ?
      Math.round(tournamentsList.reduce((acc, t) => acc + (t?.currentTeams || 0), 0) / tournamentsList.length) : 0,
  };

  // Filter for specific sections
  const ongoingTournaments = tournamentsList
    .filter(t => t?.status === 'ONGOING')
    .sort((a, b) => new Date(a.startDate) - new Date(b.startDate)) // S·∫Øp x·∫øp ƒë·ªÉ hi·ªÉn th·ªã gi·∫£i ƒë·∫•u ƒëang di·ªÖn ra s·ªõm nh·∫•t
    .slice(0, 3); // Hi·ªÉn th·ªã 3 gi·∫£i ƒë·∫•u ƒëang di·ªÖn ra g·∫ßn nh·∫•t

  const upcomingTournaments = tournamentsList
    .filter(t => t?.status === 'REGISTRATION' || t?.status === 'READY')
    .sort((a, b) => new Date(a.startDate) - new Date(b.startDate)) // S·∫Øp x·∫øp ƒë·ªÉ hi·ªÉn th·ªã gi·∫£i ƒë·∫•u s·∫Øp t·ªõi s·ªõm nh·∫•t
    .slice(0, 3); // Hi·ªÉn th·ªã 3 gi·∫£i ƒë·∫•u s·∫Øp t·ªõi g·∫ßn nh·∫•t

  const getStatusIcon = (status) => {
    switch (status) {
      case 'ONGOING':
        return <Play className="h-4 w-4 text-blue-600" />;
      case 'COMPLETED':
        return <CheckCircle className="h-4 w-4 text-green-600" />;
      case 'REGISTRATION':
        return <Users className="h-4 w-4 text-orange-600" />;
      case 'READY':
        return <Clock className="h-4 w-4 text-purple-600" />;
      default:
        return <AlertTriangle className="h-4 w-4 text-gray-600" />;
    }
  };

  if (tournamentsLoading) {
    return <LoadingSpinner />;
  }

  return (
    <div className="bg-gray-50 p-6 rounded-lg shadow-inner min-h-[calc(100vh-160px)]">
      <div className="max-w-full mx-auto space-y-8">

        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">T·ªïng quan h·ªá th·ªëng</h1>
            <p className="text-gray-600 mt-1">Th√¥ng tin t·ªïng quan v√† ho·∫°t ƒë·ªông ch√≠nh</p>
          </div>

          <div className="flex items-center space-x-3">
            {/* <button
              onClick={() => refetchTournaments()}
              className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg shadow-sm hover:bg-gray-300 transition-colors flex items-center space-x-2"
            >
              <RefreshCw className="h-4 w-4" />
              <span>L√†m m·ªõi</span>
            </button> */}

            {/* N√∫t t·∫°o gi·∫£i ƒë·∫•u m·ªõi */}
            {/* <button className="px-4 py-2 bg-blue-600 text-white rounded-lg shadow hover:bg-blue-700 transition-colors flex items-center space-x-2">
              <Plus className="h-4 w-4" />
              <span>Gi·∫£i ƒë·∫•u m·ªõi</span>
            </button> */}
          </div>
        </div>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center space-x-3">
              <div className="bg-blue-100 p-3 rounded-full">
                <Trophy className="h-6 w-6 text-blue-600" />
              </div>
              <div>
                <p className="text-sm text-gray-600">T·ªïng gi·∫£i ƒë·∫•u</p>
                <p className="text-2xl font-bold text-gray-900">{stats.total}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center space-x-3">
              <div className="bg-green-100 p-3 rounded-full">
                <Play className="h-6 w-6 text-green-600" />
              </div>
              <div>
                <p className="text-sm text-gray-600">ƒêang ho·∫°t ƒë·ªông</p>
                <p className="text-2xl font-bold text-gray-900">{stats.ongoing}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center space-x-3">
              <div className="bg-orange-100 p-3 rounded-full">
                <Clock className="h-6 w-6 text-orange-600" />
              </div>
              <div>
                <p className="text-sm text-gray-600">S·∫Øp t·ªõi</p>
                <p className="text-2xl font-bold text-gray-900">{stats.registration + stats.ready}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center space-x-3">
              <div className="bg-purple-100 p-3 rounded-full">
                <Users className="h-6 w-6 text-purple-600" />
              </div>
              <div>
                <p className="text-sm text-gray-600">T·ªïng s·ªë ƒë·ªôi</p>
                <p className="text-2xl font-bold text-gray-900">{stats.totalTeams}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Quick Stats & Performance */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Tournament Status Breakdown */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <BarChart3 className="h-5 w-5 mr-2 text-indigo-600" />
              T√¨nh tr·∫°ng gi·∫£i ƒë·∫•u
            </h3>
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                  <span className="text-sm text-gray-700">ƒêang di·ªÖn ra</span>
                </div>
                <span className="text-sm font-medium text-gray-900">{stats.ongoing}</span>
              </div>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-3 h-3 bg-orange-500 rounded-full"></div>
                  <span className="text-sm text-gray-700">ƒêƒÉng k√Ω</span>
                </div>
                <span className="text-sm font-medium text-gray-900">{stats.registration}</span>
              </div>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                  <span className="text-sm text-gray-700">ƒê√£ ho√†n th√†nh</span>
                </div>
                <span className="text-sm font-medium text-gray-900">{stats.completed}</span>
              </div>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="w-3 h-3 bg-purple-500 rounded-full"></div>
                  <span className="text-sm text-gray-700">S·∫µn s√†ng</span>
                </div>
                <span className="text-sm font-medium text-gray-900">{stats.ready}</span>
              </div>
            </div>
          </div>

          {/* Recent Activity */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <Clock className="h-5 w-5 mr-2 text-gray-600" />
              Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
            </h3>
            <div className="space-y-3">
              {Array.isArray(tournamentsList) && tournamentsList.length > 0 ? (
                // S·∫Øp x·∫øp theo ng√†y t·∫°o ho·∫∑c ng√†y b·∫Øt ƒë·∫ßu g·∫ßn nh·∫•t
                [...tournamentsList].sort((a, b) => new Date(b.createdAt || b.startDate) - new Date(a.createdAt || a.startDate)).slice(0, 5).map((tournament) => (
                  <div key={tournament.id} className="flex items-center space-x-3">
                    <div className={`w-2 h-2 rounded-full ${getStatusColor(tournament.status).split(' ')[0].replace('text-', 'bg-')}`}></div> {/* L·∫•y m√†u n·ªÅn t·ª´ tr·∫°ng th√°i */}
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900 truncate">
                        {tournament.name}
                      </p>
                      <p className="text-xs text-gray-500">
                        {formatDate(tournament.createdAt || tournament.startDate)}
                      </p>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center py-4 text-gray-500 text-sm">
                  Kh√¥ng c√≥ ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y.
                </div>
              )}
            </div>
          </div>

          {/* Performance Metrics */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <TrendingUp className="h-5 w-5 mr-2 text-green-600" />
              Hi·ªáu su·∫•t
            </h3>
            <div className="space-y-4">
              <div>
                <div className="flex items-center justify-between mb-1">
                  <span className="text-sm text-gray-600">T·ª∑ l·ªá ho√†n th√†nh</span>
                  <span className="text-sm font-medium text-gray-900">
                    {stats.total > 0 ? Math.round((stats.completed / stats.total) * 100) : 0}%
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-green-600 h-2 rounded-full transition-all duration-300"
                    style={{
                      width: `${stats.total > 0 ? (stats.completed / stats.total) * 100 : 0}%`
                    }}
                  ></div>
                </div>
              </div>

              <div>
                <div className="flex items-center justify-between mb-1">
                  <span className="text-sm text-gray-600">Trung b√¨nh ƒë·ªôi/gi·∫£i ƒë·∫•u</span>
                  <span className="text-sm font-medium text-gray-900">{stats.avgTeamsPerTournament}</span>
                </div>
              </div>

              <div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">T·ª∑ l·ªá ƒëang ho·∫°t ƒë·ªông</span>
                  <span className="text-sm font-medium text-gray-900">
                    {stats.total > 0 ? Math.round((stats.ongoing / stats.total) * 100) : 0}%
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* C√°c ph·∫ßn m·ªõi thay th·∫ø b·∫£ng "All Tournaments" */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Ongoing Tournaments Section */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                <Play className="h-5 w-5 mr-2 text-blue-600" />
                Gi·∫£i ƒë·∫•u ƒëang di·ªÖn ra
              </h3>
              {/* <button className="text-sm font-medium text-blue-600 hover:text-blue-800 flex items-center group">
                Xem t·∫•t c·∫£
                <ArrowRight className="h-4 w-4 ml-1 transition-transform group-hover:translate-x-1" />
              </button> */}
            </div>
            <div className="p-6 space-y-4">
              {ongoingTournaments.length > 0 ? (
                ongoingTournaments.map((tournament) => (
                  <div key={tournament.id} className="flex items-start space-x-3 bg-gray-50 p-3 rounded-lg border border-gray-100">
                    <div className={`flex-shrink-0 p-2 rounded-full ${getStatusColor(tournament.status).split(' ')[0].replace('text-', 'bg-')}`}>
                       {getStatusIcon(tournament.status)}
                    </div>
                    <div className="flex-1">
                      <p className="text-base font-medium text-gray-900">{tournament.name}</p>
                      <p className="text-sm text-gray-500">{formatDate(tournament.startDate)} - {tournament.currentTeams || 0} ƒë·ªôi</p>
                    </div>
                    {/* B·∫°n c√≥ th·ªÉ th√™m n√∫t h√†nh ƒë·ªông c·ª• th·ªÉ ·ªü ƒë√¢y n·∫øu c·∫ßn */}
                    {/* <button title="View Details" className="flex-shrink-0 text-gray-400 hover:text-gray-600">
                      <Eye className="h-5 w-5" />
                    </button> */}
                  </div>
                ))
              ) : (
                <div className="text-center py-4 text-gray-500 text-sm">
                  Kh√¥ng c√≥ gi·∫£i ƒë·∫•u n√†o ƒëang di·ªÖn ra.
                </div>
              )}
            </div>
          </div>

          {/* Upcoming Tournaments Section */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                <Timer className="h-5 w-5 mr-2 text-orange-600" /> {/* S·ª≠ d·ª•ng icon Timer */}
                Gi·∫£i ƒë·∫•u s·∫Øp t·ªõi
              </h3>
              {/* <button className="text-sm font-medium text-blue-600 hover:text-blue-800 flex items-center group">
                Xem t·∫•t c·∫£
                <ArrowRight className="h-4 w-4 ml-1 transition-transform group-hover:translate-x-1" />
              </button> */}
            </div>
            <div className="p-6 space-y-4">
              {upcomingTournaments.length > 0 ? (
                upcomingTournaments.map((tournament) => (
                  <div key={tournament.id} className="flex items-start space-x-3 bg-gray-50 p-3 rounded-lg border border-gray-100">
                    <div className={`flex-shrink-0 p-2 rounded-full ${getStatusColor(tournament.status).split(' ')[0].replace('text-', 'bg-')}`}>
                       {getStatusIcon(tournament.status)}
                    </div>
                    <div className="flex-1">
                      <p className="text-base font-medium text-gray-900">{tournament.name}</p>
                      <p className="text-sm text-gray-500">{formatDate(tournament.startDate)} - ƒêƒÉng k√Ω: {tournament.currentTeams || 0}/{tournament.maxTeams || 'N/A'}</p>
                    </div>
                    {/* B·∫°n c√≥ th·ªÉ th√™m n√∫t h√†nh ƒë·ªông c·ª• th·ªÉ ·ªü ƒë√¢y n·∫øu c·∫ßn */}
                    {/* <button title="View Details" className="flex-shrink-0 text-gray-400 hover:text-gray-600">
                      <Eye className="h-5 w-5" />
                    </button> */}
                  </div>
                ))
              ) : (
                <div className="text-center py-4 text-gray-500 text-sm">
                  Kh√¥ng c√≥ gi·∫£i ƒë·∫•u s·∫Øp t·ªõi.
                </div>
              )}
            </div>
          </div>
        </div>

      </div>
    </div>
  );
};

export default AdminTournamentDashboard;