import React, { useState } from 'react';
import { Play, RefreshCw, CheckCircle, XCircle, AlertTriangle, Info } from 'lucide-react';
import NewsAPIDebugger from '../../utils/newsAPIDebugger';
import newsService from '../../services/newsService';
import toast from 'react-hot-toast';

const NewsDebugPanel = () => {
  const [isRunning, setIsRunning] = useState(false);
  const [testResults, setTestResults] = useState(null);
  const [logs, setLogs] = useState([]);

  // Override console.log ƒë·ªÉ capture logs
  const originalConsoleLog = console.log;
  const originalConsoleError = console.error;

  const captureConsoleLogs = () => {
    setLogs([]);
    
    console.log = (...args) => {
      const formattedMessage = args.map(arg => 
        typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
      ).join(' ');
      setLogs(prev => [...prev, { type: 'log', message: formattedMessage, timestamp: new Date() }]);
      originalConsoleLog(...args);
    };
    
    console.error = (...args) => {
      const formattedMessage = args.map(arg => 
        typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
      ).join(' ');
      setLogs(prev => [...prev, { type: 'error', message: formattedMessage, timestamp: new Date() }]);
      originalConsoleError(...args);
    };
  };

  const restoreConsole = () => {
    console.log = originalConsoleLog;
    console.error = originalConsoleError;
  };

  const runAllTests = async () => {
    setIsRunning(true);
    setTestResults(null);
    captureConsoleLogs();
    
    try {
      toast.loading('ƒêang ch·∫°y c√°c test API...', { id: 'debug-test' });
      const results = await NewsAPIDebugger.runAllTests();
      setTestResults(results);
      
      if (Object.values(results).every(result => result === true || (typeof result === 'object' && result !== null))) {
        toast.success('T·∫•t c·∫£ tests ƒë√£ ho√†n th√†nh!', { id: 'debug-test' });
      } else {
        toast.error('M·ªôt s·ªë tests th·∫•t b·∫°i. Ki·ªÉm tra console ƒë·ªÉ bi·∫øt chi ti·∫øt.', { id: 'debug-test' });
      }
    } catch (error) {
      toast.error('L·ªói khi ch·∫°y tests: ' + error.message, { id: 'debug-test' });
    } finally {
      setIsRunning(false);
      restoreConsole();
    }
  };

  const getStatusIcon = (status) => {
    if (status === true) return <CheckCircle className="h-5 w-5 text-green-500" />;
    if (status === false) return <XCircle className="h-5 w-5 text-red-500" />;
    if (typeof status === 'object' && status !== null) return <Info className="h-5 w-5 text-blue-500" />;
    return <AlertTriangle className="h-5 w-5 text-yellow-500" />;
  };

  const getStatusText = (status) => {
    if (status === true) return 'Th√†nh c√¥ng';
    if (status === false) return 'Th·∫•t b·∫°i';
    if (typeof status === 'object' && status !== null) return 'C√≥ d·ªØ li·ªáu';
    return 'Kh√¥ng x√°c ƒë·ªãnh';
  };

  const getOverallStatus = (results) => {
    if (!results) return null;
    
    const hasApiConnection = results.apiConnection === true;
    const hasWorkingCreate = results.createNews === true;
    const hasAnalysis = results.apiAnalysis !== null && typeof results.apiAnalysis === 'object';
    
    if (hasApiConnection && hasWorkingCreate && hasAnalysis) {
      return { status: 'success', message: 'T·∫•t c·∫£ ch·ª©c nƒÉng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!' };
    } else if (hasApiConnection && hasAnalysis) {
      return { status: 'partial', message: 'API ho·∫°t ƒë·ªông nh∆∞ng c√≥ v·∫•n ƒë·ªÅ v·ªõi t·∫°o tin t·ª©c' };
    } else if (hasApiConnection) {
      return { status: 'warning', message: 'K·∫øt n·ªëi API th√†nh c√¥ng nh∆∞ng m·ªôt s·ªë ch·ª©c nƒÉng th·∫•t b·∫°i' };
    } else {
      return { status: 'error', message: 'API kh√¥ng ho·∫°t ƒë·ªông' };
    }
  };

  const formatLogMessage = (message) => {
    // Remove debug prefixes for cleaner display
    return message
      .replace(/^üîß \[NEWS DEBUG\] /, '')
      .replace(/^üì∞ \[NEWS DEBUG\] /, '')
      .replace(/^‚úÖ \[NEWS DEBUG\] /, '')
      .replace(/^‚ùå \[NEWS DEBUG\] /, '')
      .replace(/^‚ö†Ô∏è \[NEWS DEBUG\] /, '')
      .replace(/^üí° \[NEWS DEBUG\] /, '')
      .replace(/^üéâ \[NEWS DEBUG\] /, '')
      .replace(/^üìã \[NEWS DEBUG\] /, '')
      .replace(/^üè• \[NEWS DEBUG\] /, '')
      .replace(/^üöÄ \[NEWS DEBUG\] /, '');
  };

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">News API Debug Panel</h2>
            <p className="text-gray-600">Ki·ªÉm tra v√† debug c√°c v·∫•n ƒë·ªÅ v·ªõi News API</p>
          </div>
          <button
            onClick={runAllTests}
            disabled={isRunning}
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isRunning ? (
              <>
                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                ƒêang ch·∫°y...
              </>
            ) : (
              <>
                <Play className="h-4 w-4 mr-2" />
                Ch·∫°y t·∫•t c·∫£ tests
              </>
            )}
          </button>
        </div>

        {/* Test Results */}
        {testResults && (
          <div className="space-y-6 mb-8">
            {/* Overall Status */}
            {(() => {
              const overallStatus = getOverallStatus(testResults);
              if (!overallStatus) return null;
              
              const statusColors = {
                success: 'bg-green-50 border-green-200 text-green-800',
                partial: 'bg-yellow-50 border-yellow-200 text-yellow-800', 
                warning: 'bg-orange-50 border-orange-200 text-orange-800',
                error: 'bg-red-50 border-red-200 text-red-800'
              };
              
              return (
                <div className={`p-4 rounded-lg border ${statusColors[overallStatus.status]}`}>
                  <div className="flex items-center space-x-2">
                    {overallStatus.status === 'success' && <CheckCircle className="h-5 w-5" />}
                    {overallStatus.status === 'partial' && <AlertTriangle className="h-5 w-5" />}
                    {overallStatus.status === 'warning' && <AlertTriangle className="h-5 w-5" />}
                    {overallStatus.status === 'error' && <XCircle className="h-5 w-5" />}
                    <span className="font-semibold">T·ªïng quan: {overallStatus.message}</span>
                  </div>
                </div>
              );
            })()}
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-3">
                <h3 className="text-lg font-semibold text-gray-900">K·∫øt qu·∫£ Tests</h3>
                
                <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <span className="text-sm font-medium">Backend Health Check</span>
                  <div className="flex items-center space-x-2">
                    {getStatusIcon(testResults.backendHealth)}
                    <span className="text-sm">{getStatusText(testResults.backendHealth)}</span>
                  </div>
                </div>

                <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <span className="text-sm font-medium">API Connection</span>
                  <div className="flex items-center space-x-2">
                    {getStatusIcon(testResults.apiConnection)}
                    <span className="text-sm">{getStatusText(testResults.apiConnection)}</span>
                  </div>
                </div>

                <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <span className="text-sm font-medium">Create News Test</span>
                  <div className="flex items-center space-x-2">
                    {getStatusIcon(testResults.createNews)}
                    <span className="text-sm">{getStatusText(testResults.createNews)}</span>
                  </div>
                </div>

                <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <span className="text-sm font-medium">API Analysis</span>
                  <div className="flex items-center space-x-2">
                    {getStatusIcon(testResults.apiAnalysis)}
                    <span className="text-sm">{getStatusText(testResults.apiAnalysis)}</span>
                  </div>
                </div>
              </div>

              {/* API Analysis Details */}
              {testResults.apiAnalysis && typeof testResults.apiAnalysis === 'object' && (
                <div className="space-y-3">
                  <h3 className="text-lg font-semibold text-gray-900">Ph√¢n t√≠ch API Response</h3>
                  <div className="bg-gray-50 rounded-lg p-3 space-y-2 text-sm">
                    <div><strong>Response Type:</strong> {testResults.apiAnalysis.responseType}</div>
                    <div><strong>Is Array:</strong> {testResults.apiAnalysis.isArray ? 'Yes' : 'No'}</div>
                    <div><strong>Length:</strong> {testResults.apiAnalysis.length}</div>
                    <div><strong>Structure:</strong> {testResults.apiAnalysis.structure}</div>
                    {testResults.apiAnalysis.itemFields && (
                      <div>
                        <strong>Available Fields:</strong>
                        <div className="mt-1 flex flex-wrap gap-1">
                          {testResults.apiAnalysis.itemFields.map(field => (
                            <span key={field} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">
                              {field}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Console Logs */}
        {logs.length > 0 && (
          <div className="space-y-3 mb-8">
            <h3 className="text-lg font-semibold text-gray-900">Console Logs</h3>
            <div className="bg-black text-green-400 p-4 rounded-lg max-h-96 overflow-y-auto font-mono text-sm">
              {logs.map((log, index) => (
                <div key={index} className={`mb-1 ${log.type === 'error' ? 'text-red-400' : 'text-green-400'}`}>
                  <span className="text-gray-500 text-xs">
                    [{log.timestamp.toLocaleTimeString()}]
                  </span>{' '}
                  {formatLogMessage(log.message)}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Troubleshooting Guide */}
        <div className="mt-8 space-y-4">
          <h3 className="text-lg font-semibold text-gray-900">H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c s·ª± c·ªë</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <h4 className="font-medium text-red-800 mb-2">‚ùå Backend Health Check th·∫•t b·∫°i</h4>
              <ul className="text-sm text-red-700 space-y-1">
                <li>‚Ä¢ Ki·ªÉm tra backend server c√≥ ƒëang ch·∫°y kh√¥ng</li>
                <li>‚Ä¢ X√°c nh·∫≠n URL trong .env.local: {process.env.REACT_APP_API_URL || 'http://localhost:8080'}</li>
                <li>‚Ä¢ Ki·ªÉm tra firewall v√† network connection</li>
              </ul>
            </div>

            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <h4 className="font-medium text-yellow-800 mb-2">‚ö†Ô∏è API Connection th·∫•t b·∫°i</h4>
              <ul className="text-sm text-yellow-700 space-y-1">
                <li>‚Ä¢ Ki·ªÉm tra endpoint /api/v1/news c√≥ t·ªìn t·∫°i kh√¥ng</li>
                <li>‚Ä¢ X√°c nh·∫≠n authentication token</li>
                <li>‚Ä¢ Ki·ªÉm tra CORS settings tr√™n backend</li>
              </ul>
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h4 className="font-medium text-blue-800 mb-2">‚ÑπÔ∏è C·∫•u tr√∫c d·ªØ li·ªáu kh√¥ng ƒë√∫ng</h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ API tr·∫£ v·ªÅ object thay v√¨ array</li>
                <li>‚Ä¢ C·∫ßn c·∫≠p nh·∫≠t newsService.js ƒë·ªÉ handle response structure</li>
                <li>‚Ä¢ Ki·ªÉm tra API documentation</li>
              </ul>
            </div>

            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <h4 className="font-medium text-green-800 mb-2">‚úÖ N·∫øu t·∫•t c·∫£ tests ƒë·ªÅu pass</h4>
              <ul className="text-sm text-green-700 space-y-1">
                <li>‚Ä¢ News API ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng</li>
                <li>‚Ä¢ Ki·ªÉm tra components c√≥ import ƒë√∫ng kh√¥ng</li>
                <li>‚Ä¢ Clear browser cache v√† reload</li>
              </ul>
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="mt-8 space-y-4">
          <h3 className="text-lg font-semibold text-gray-900">Quick Actions</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <button
              onClick={() => {
                console.clear();
                setLogs([]);
                toast.success('Console ƒë√£ ƒë∆∞·ª£c cleared');
              }}
              className="btn-secondary text-sm"
            >
              Clear Console
            </button>
            
            <button
              onClick={async () => {
                try {
                  const news = await newsService.getAllNews();
                  console.log('Raw API Response:', JSON.stringify(news, null, 2));
                  toast.success(`ƒê√£ l·∫•y ƒë∆∞·ª£c ${Array.isArray(news) ? news.length : 0} tin t·ª©c`);
                } catch (error) {
                  console.error('API Error:', error);
                  toast.error('L·ªói khi g·ªçi API: ' + error.message);
                }
              }}
              className="btn-secondary text-sm"
              disabled={isRunning}
            >
              Test getAllNews
            </button>
            
            <button
              onClick={() => {
                window.open('/admin', '_blank');
              }}
              className="btn-secondary text-sm"
            >
              M·ªü Admin Panel
            </button>
            
            <button
              onClick={() => {
                window.open('/news', '_blank');
              }}
              className="btn-secondary text-sm"
            >
              M·ªü News Page
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default NewsDebugPanel;